//
//Copyright 2018 Google LLC
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//https://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.6.1
// source: proto/report/report.proto

package report

import (
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	gnmi "github.com/openconfig/gnmi/proto/gnmi"
	tests "github.com/openconfig/gnmitest/proto/tests"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// CompletionStatus indicates the reason why the test ended.
type CompletionStatus int32

const (
	// Test finished with an unknown reason.
	CompletionStatus_UNKNOWN CompletionStatus = 0
	// Test successfully runs to completion.
	CompletionStatus_FINISHED CompletionStatus = 1
	// Test successfully runs to completion, but the completion is triggered by
	// test.
	CompletionStatus_EARLY_FINISHED CompletionStatus = 2
	// RPC request fails during test execution.
	CompletionStatus_RPC_ERROR CompletionStatus = 3
	// Test execution finished because of RPC request timeout.
	CompletionStatus_TIMEOUT CompletionStatus = 4
)

// Enum value maps for CompletionStatus.
var (
	CompletionStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "FINISHED",
		2: "EARLY_FINISHED",
		3: "RPC_ERROR",
		4: "TIMEOUT",
	}
	CompletionStatus_value = map[string]int32{
		"UNKNOWN":        0,
		"FINISHED":       1,
		"EARLY_FINISHED": 2,
		"RPC_ERROR":      3,
		"TIMEOUT":        4,
	}
)

func (x CompletionStatus) Enum() *CompletionStatus {
	p := new(CompletionStatus)
	*p = x
	return p
}

func (x CompletionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompletionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_report_report_proto_enumTypes[0].Descriptor()
}

func (CompletionStatus) Type() protoreflect.EnumType {
	return &file_proto_report_report_proto_enumTypes[0]
}

func (x CompletionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompletionStatus.Descriptor instead.
func (CompletionStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{0}
}

// Result of running an individual test.
type Status int32

const (
	// Indicates that test result is not set.
	Status_UNSET Status = 0
	// Indicates that test passes.
	Status_SUCCESS Status = 1
	// Indicates that test fails.
	Status_FAIL Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UNSET",
		1: "SUCCESS",
		2: "FAIL",
	}
	Status_value = map[string]int32{
		"UNSET":   0,
		"SUCCESS": 1,
		"FAIL":    2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_report_report_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_proto_report_report_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{1}
}

// MatchResult enumerates the outcome of a match comparison.
type MatchResult int32

const (
	MatchResult_MR_UNSET   MatchResult = 0
	MatchResult_MR_EQUAL   MatchResult = 1
	MatchResult_MR_UNEQUAL MatchResult = 2
)

// Enum value maps for MatchResult.
var (
	MatchResult_name = map[int32]string{
		0: "MR_UNSET",
		1: "MR_EQUAL",
		2: "MR_UNEQUAL",
	}
	MatchResult_value = map[string]int32{
		"MR_UNSET":   0,
		"MR_EQUAL":   1,
		"MR_UNEQUAL": 2,
	}
)

func (x MatchResult) Enum() *MatchResult {
	p := new(MatchResult)
	*p = x
	return p
}

func (x MatchResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchResult) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_report_report_proto_enumTypes[2].Descriptor()
}

func (MatchResult) Type() protoreflect.EnumType {
	return &file_proto_report_report_proto_enumTypes[2]
}

func (x MatchResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchResult.Descriptor instead.
func (MatchResult) EnumDescriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{2}
}

// SubscribeResponseResult proto is used to pair a gnmi SubscribeResponse and
// the error returned from Process function of the test.
type SubscribeResponseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gnmi SubscribeResponse received by the test.
	Response *gnmi.SubscribeResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	// error returned by Process function of the test.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SubscribeResponseResult) Reset() {
	*x = SubscribeResponseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_report_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponseResult) ProtoMessage() {}

func (x *SubscribeResponseResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponseResult.ProtoReflect.Descriptor instead.
func (*SubscribeResponseResult) Descriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeResponseResult) GetResponse() *gnmi.SubscribeResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubscribeResponseResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// TestError corresponds to a single error case reported during execution of a
// test. Test can emit multiple errors as a result of processing single
// SubscribeResponse message.
type TestError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message has human readable error that is set by the test.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// gnmi path corresponding to the message set. path is set by test as well.
	Path *gnmi.Path `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Additional details test can provide in the error.
	Details *any.Any `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *TestError) Reset() {
	*x = TestError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_report_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestError) ProtoMessage() {}

func (x *TestError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestError.ProtoReflect.Descriptor instead.
func (*TestError) Descriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{1}
}

func (x *TestError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TestError) GetPath() *gnmi.Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *TestError) GetDetails() *any.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

// SubscribeTestResult is result of running an individual
// suite.SubscribeTest.
type SubscribeTestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscribeResponse messages received as a result of subscription.
	Responses []*SubscribeResponseResult `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	// If test is stateful, error is set as a result of calling Check function of
	// the test. If test is stateless, error set here can be ignored.
	//
	// Deprecated: Do not use.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// CompletionStatus indicates why the test ended.
	Status CompletionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=report.CompletionStatus" json:"status,omitempty"`
	// List of errors received while running the test.
	Errors []*TestError `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SubscribeTestResult) Reset() {
	*x = SubscribeTestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_report_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTestResult) ProtoMessage() {}

func (x *SubscribeTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTestResult.ProtoReflect.Descriptor instead.
func (*SubscribeTestResult) Descriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{2}
}

func (x *SubscribeTestResult) GetResponses() []*SubscribeResponseResult {
	if x != nil {
		return x.Responses
	}
	return nil
}

// Deprecated: Do not use.
func (x *SubscribeTestResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SubscribeTestResult) GetStatus() CompletionStatus {
	if x != nil {
		return x.Status
	}
	return CompletionStatus_UNKNOWN
}

func (x *SubscribeTestResult) GetErrors() []*TestError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// GetSetTestResult is the result of a GetSet test towards a target.
type GetSetTestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *tests.Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	// Result of running the test.
	Result Status `protobuf:"varint,2,opt,name=result,proto3,enum=report.Status" json:"result,omitempty"`
	// Result of the initialisation operation specified in the input test.
	InitialiseOper *GetSetOperResult `protobuf:"bytes,3,opt,name=initialise_oper,json=initialiseOper,proto3" json:"initialise_oper,omitempty"`
	// Result of the test operation specified in the input test.
	TestOper *GetSetOperResult `protobuf:"bytes,4,opt,name=test_oper,json=testOper,proto3" json:"test_oper,omitempty"`
}

func (x *GetSetTestResult) Reset() {
	*x = GetSetTestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_report_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSetTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSetTestResult) ProtoMessage() {}

func (x *GetSetTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSetTestResult.ProtoReflect.Descriptor instead.
func (*GetSetTestResult) Descriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{3}
}

func (x *GetSetTestResult) GetTest() *tests.Test {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *GetSetTestResult) GetResult() Status {
	if x != nil {
		return x.Result
	}
	return Status_UNSET
}

func (x *GetSetTestResult) GetInitialiseOper() *GetSetOperResult {
	if x != nil {
		return x.InitialiseOper
	}
	return nil
}

func (x *GetSetTestResult) GetTestOper() *GetSetOperResult {
	if x != nil {
		return x.TestOper
	}
	return nil
}

// GetSetOperResult is the result of an individual operation within the
// GetSetTest.
type GetSetOperResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of the operation.
	Result Status `protobuf:"varint,1,opt,name=result,proto3,enum=report.Status" json:"result,omitempty"`
	// set_responses is the SetResponse message received from the target.
	SetResponse *gnmi.SetResponse `protobuf:"bytes,2,opt,name=set_response,json=setResponse,proto3" json:"set_response,omitempty"`
	// set_status is the status.proto message received from the target in
	// response to the Set RPC within the operation.
	SetStatus *status.Status `protobuf:"bytes,3,opt,name=set_status,json=setStatus,proto3" json:"set_status,omitempty"`
	// get_response is the GetResponse received from the target.
	GetResponse *gnmi.GetResponse `protobuf:"bytes,4,opt,name=get_response,json=getResponse,proto3" json:"get_response,omitempty"`
	// get_status is the status.proto message received from the target in
	// response to the Get RPC within the operation.
	GetStatus *status.Status `protobuf:"bytes,5,opt,name=get_status,json=getStatus,proto3" json:"get_status,omitempty"`
	// get_response_matched indicates whether the GetResponse received from
	// the target matched that specified in the test.
	GetResponseMatched MatchResult `protobuf:"varint,6,opt,name=get_response_matched,json=getResponseMatched,proto3,enum=report.MatchResult" json:"get_response_matched,omitempty"`
}

func (x *GetSetOperResult) Reset() {
	*x = GetSetOperResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_report_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSetOperResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSetOperResult) ProtoMessage() {}

func (x *GetSetOperResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSetOperResult.ProtoReflect.Descriptor instead.
func (*GetSetOperResult) Descriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{4}
}

func (x *GetSetOperResult) GetResult() Status {
	if x != nil {
		return x.Result
	}
	return Status_UNSET
}

func (x *GetSetOperResult) GetSetResponse() *gnmi.SetResponse {
	if x != nil {
		return x.SetResponse
	}
	return nil
}

func (x *GetSetOperResult) GetSetStatus() *status.Status {
	if x != nil {
		return x.SetStatus
	}
	return nil
}

func (x *GetSetOperResult) GetGetResponse() *gnmi.GetResponse {
	if x != nil {
		return x.GetResponse
	}
	return nil
}

func (x *GetSetOperResult) GetGetStatus() *status.Status {
	if x != nil {
		return x.GetStatus
	}
	return nil
}

func (x *GetSetOperResult) GetGetResponseMatched() MatchResult {
	if x != nil {
		return x.GetResponseMatched
	}
	return MatchResult_MR_UNSET
}

// Test is used to pair a tests.Test and its result.
type TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *tests.Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	// Result of running the test.
	Result Status `protobuf:"varint,2,opt,name=result,proto3,enum=report.Status" json:"result,omitempty"`
	// Oneof field can be expanded to include results of other gnmi RPCs.
	//
	// Types that are assignable to Type:
	//	*TestResult_Subscribe
	//	*TestResult_Getset
	Type isTestResult_Type `protobuf_oneof:"type"`
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_report_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{5}
}

func (x *TestResult) GetTest() *tests.Test {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *TestResult) GetResult() Status {
	if x != nil {
		return x.Result
	}
	return Status_UNSET
}

func (m *TestResult) GetType() isTestResult_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TestResult) GetSubscribe() *SubscribeTestResult {
	if x, ok := x.GetType().(*TestResult_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *TestResult) GetGetset() *GetSetTestResult {
	if x, ok := x.GetType().(*TestResult_Getset); ok {
		return x.Getset
	}
	return nil
}

type isTestResult_Type interface {
	isTestResult_Type()
}

type TestResult_Subscribe struct {
	Subscribe *SubscribeTestResult `protobuf:"bytes,10,opt,name=subscribe,proto3,oneof"`
}

type TestResult_Getset struct {
	Getset *GetSetTestResult `protobuf:"bytes,11,opt,name=getset,proto3,oneof"`
}

func (*TestResult_Subscribe) isTestResult_Type() {}

func (*TestResult_Getset) isTestResult_Type() {}

// Instance stores test results of main test and its extensions.
type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string        `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Test        *TestResult   `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
	Extensions  []*TestResult `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_report_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{6}
}

func (x *Instance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Instance) GetTest() *TestResult {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *Instance) GetExtensions() []*TestResult {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// InstanceGroup stores a set of Instances.
type InstanceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string      `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Instance    []*Instance `protobuf:"bytes,2,rep,name=instance,proto3" json:"instance,omitempty"`
	// Skipped indicates whether the instance group was skipped during
	// test execution based on a prior group being fatal.
	Skipped bool `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
}

func (x *InstanceGroup) Reset() {
	*x = InstanceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_report_report_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroup) ProtoMessage() {}

func (x *InstanceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_report_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroup.ProtoReflect.Descriptor instead.
func (*InstanceGroup) Descriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{7}
}

func (x *InstanceGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstanceGroup) GetInstance() []*Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceGroup) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

// Report is result of running suite.Suite
type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*InstanceGroup `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_report_report_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_proto_report_report_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_proto_report_report_proto_rawDescGZIP(), []int{8}
}

func (x *Report) GetResults() []*InstanceGroup {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_proto_report_report_proto protoreflect.FileDescriptor

var file_proto_report_report_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6d,
	0x69, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x64, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x75, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67,
	0x6e, 0x6d, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2e,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xcb,
	0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xd5, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x22, 0xd3, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x67, 0x65, 0x74, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74,
	0x73, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x08,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x79, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x22, 0x39, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2a, 0x5d, 0x0a, 0x10,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x41, 0x52, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x2a, 0x2a, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x2a, 0x39, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x52, 0x5f, 0x55, 0x4e, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_report_report_proto_rawDescOnce sync.Once
	file_proto_report_report_proto_rawDescData = file_proto_report_report_proto_rawDesc
)

func file_proto_report_report_proto_rawDescGZIP() []byte {
	file_proto_report_report_proto_rawDescOnce.Do(func() {
		file_proto_report_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_report_report_proto_rawDescData)
	})
	return file_proto_report_report_proto_rawDescData
}

var file_proto_report_report_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_report_report_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_report_report_proto_goTypes = []interface{}{
	(CompletionStatus)(0),           // 0: report.CompletionStatus
	(Status)(0),                     // 1: report.Status
	(MatchResult)(0),                // 2: report.MatchResult
	(*SubscribeResponseResult)(nil), // 3: report.SubscribeResponseResult
	(*TestError)(nil),               // 4: report.TestError
	(*SubscribeTestResult)(nil),     // 5: report.SubscribeTestResult
	(*GetSetTestResult)(nil),        // 6: report.GetSetTestResult
	(*GetSetOperResult)(nil),        // 7: report.GetSetOperResult
	(*TestResult)(nil),              // 8: report.TestResult
	(*Instance)(nil),                // 9: report.Instance
	(*InstanceGroup)(nil),           // 10: report.InstanceGroup
	(*Report)(nil),                  // 11: report.Report
	(*gnmi.SubscribeResponse)(nil),  // 12: gnmi.SubscribeResponse
	(*gnmi.Path)(nil),               // 13: gnmi.Path
	(*any.Any)(nil),                 // 14: google.protobuf.Any
	(*tests.Test)(nil),              // 15: tests.Test
	(*gnmi.SetResponse)(nil),        // 16: gnmi.SetResponse
	(*status.Status)(nil),           // 17: google.rpc.Status
	(*gnmi.GetResponse)(nil),        // 18: gnmi.GetResponse
}
var file_proto_report_report_proto_depIdxs = []int32{
	12, // 0: report.SubscribeResponseResult.response:type_name -> gnmi.SubscribeResponse
	13, // 1: report.TestError.path:type_name -> gnmi.Path
	14, // 2: report.TestError.details:type_name -> google.protobuf.Any
	3,  // 3: report.SubscribeTestResult.responses:type_name -> report.SubscribeResponseResult
	0,  // 4: report.SubscribeTestResult.status:type_name -> report.CompletionStatus
	4,  // 5: report.SubscribeTestResult.errors:type_name -> report.TestError
	15, // 6: report.GetSetTestResult.test:type_name -> tests.Test
	1,  // 7: report.GetSetTestResult.result:type_name -> report.Status
	7,  // 8: report.GetSetTestResult.initialise_oper:type_name -> report.GetSetOperResult
	7,  // 9: report.GetSetTestResult.test_oper:type_name -> report.GetSetOperResult
	1,  // 10: report.GetSetOperResult.result:type_name -> report.Status
	16, // 11: report.GetSetOperResult.set_response:type_name -> gnmi.SetResponse
	17, // 12: report.GetSetOperResult.set_status:type_name -> google.rpc.Status
	18, // 13: report.GetSetOperResult.get_response:type_name -> gnmi.GetResponse
	17, // 14: report.GetSetOperResult.get_status:type_name -> google.rpc.Status
	2,  // 15: report.GetSetOperResult.get_response_matched:type_name -> report.MatchResult
	15, // 16: report.TestResult.test:type_name -> tests.Test
	1,  // 17: report.TestResult.result:type_name -> report.Status
	5,  // 18: report.TestResult.subscribe:type_name -> report.SubscribeTestResult
	6,  // 19: report.TestResult.getset:type_name -> report.GetSetTestResult
	8,  // 20: report.Instance.test:type_name -> report.TestResult
	8,  // 21: report.Instance.extensions:type_name -> report.TestResult
	9,  // 22: report.InstanceGroup.instance:type_name -> report.Instance
	10, // 23: report.Report.results:type_name -> report.InstanceGroup
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_proto_report_report_proto_init() }
func file_proto_report_report_proto_init() {
	if File_proto_report_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_report_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_report_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_report_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_report_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSetTestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_report_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSetOperResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_report_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_report_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_report_report_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_report_report_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_report_report_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*TestResult_Subscribe)(nil),
		(*TestResult_Getset)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_report_report_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_report_report_proto_goTypes,
		DependencyIndexes: file_proto_report_report_proto_depIdxs,
		EnumInfos:         file_proto_report_report_proto_enumTypes,
		MessageInfos:      file_proto_report_report_proto_msgTypes,
	}.Build()
	File_proto_report_report_proto = out.File
	file_proto_report_report_proto_rawDesc = nil
	file_proto_report_report_proto_goTypes = nil
	file_proto_report_report_proto_depIdxs = nil
}
