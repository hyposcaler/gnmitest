//
//Copyright 2018 Google LLC
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//https://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.6.1
// source: proto/suite/suite.proto

// The suite package defines a test suite that is executed within the gnmitest
// framework.
//
// A Suite message defines a set of tests that are to be run as part of a common
// test report. Each Suite contains a set of InstanceGroups, which in turn
// contain test instances, as shown below:
//
//   - Suite
//      - InstanceGroup (description: "group1")
//         - Instance   (description: "test1")
//         - Instance   (description: "test2")
//      - InstanceGroup (description: "group2")
//         - Instance   (description: "test3")
//      - InstanceGroup (description: "group3")
//         - Instance   (description: "test4")
//
// In this case, a single suite contains three instance groups (groups 1, 2 and
// 3). InstanceGroups are executed sequentially, in the order that they are
// defined within the Suite message.
//
// Instances (i.e., individual tests) within an InstanceGroup are run in
// parallel - such that the framework does not wait for the previous test to
// complete before launching the next test within the instance group.
//
// In the example above, "test1" and "test2" will be executed simultaneously.
// When both test1 and test2 have completed, test3 will be executed followed by
// test4.
//
// If any of the InstanceGroups specified set the "fatal" field to true,
// subsequent InstanceGroups are not executed, and the test is considered
// failed. This control can be used to check pre-requisites of the tests prior
// to subsequent test execution.
//
// Users should take care to ensure that tests that are defined within
// the same InstanceGroup do not overlap with one another, particularly where
// they involve manipulating the state of the gNMI target rather than simply
// reading from it.
//
// Tests can specify a schema that is expected to be used as part of the test,
// which reflects a compiled-in set of data structures that can be used to
// handle the payload of the gNMI RPC. The supported format of these data
// structures are Go structs that are produced by ygot
// (https://github.com/openconfig/ygot). If the top-level Suite specifies a
// schema, all tests that do not specify an overridden schema inherit it.

package suite

import (
	proto "github.com/golang/protobuf/proto"
	gnmi "github.com/openconfig/gnmi/proto/gnmi"
	tests "github.com/openconfig/gnmitest/proto/tests"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Suite is the main proto message that comprises all the test configuration
// for test framework.
type Suite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the suite. Used for reporting purposes.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Amount of time in seconds a test is allowed to run before cancelled.
	// This can be overridden by individual tests.
	Timeout int32 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Schema denotes which version of compiled gostructs to use in the test. If
	// test doesn't specify one, the one specified in Suite will be effective.
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// Connection parameters to use while dialing into target. This must be set
	// here or in all individual tests. If set both here and a test, the test
	// instance takes precedence.
	Connection *tests.Connection `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection,omitempty"`
	// Set of ExtensionList that can be referenced while composing
	// openconfig.test.Instance.
	ExtensionList map[string]*ExtensionList `protobuf:"bytes,10,rep,name=extension_list,json=extensionList,proto3" json:"extension_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of openconfig.test.InstanceGroup that comprises the test suite.
	// openconfig.test.InstanceGroups run serially. However the tests within
	// openconfig.test.InstanceGroup run in parallel.
	InstanceGroupList []*InstanceGroup `protobuf:"bytes,15,rep,name=instance_group_list,json=instanceGroupList,proto3" json:"instance_group_list,omitempty"`
	// A set of common request and response messages which can be referenced
	// from individual tests to reduce duplication of messages in the test
	// specification.
	Common *CommonMessages `protobuf:"bytes,16,opt,name=common,proto3" json:"common,omitempty"`
}

func (x *Suite) Reset() {
	*x = Suite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_suite_suite_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suite) ProtoMessage() {}

func (x *Suite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_suite_suite_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suite.ProtoReflect.Descriptor instead.
func (*Suite) Descriptor() ([]byte, []int) {
	return file_proto_suite_suite_proto_rawDescGZIP(), []int{0}
}

func (x *Suite) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Suite) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Suite) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Suite) GetConnection() *tests.Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *Suite) GetExtensionList() map[string]*ExtensionList {
	if x != nil {
		return x.ExtensionList
	}
	return nil
}

func (x *Suite) GetInstanceGroupList() []*InstanceGroup {
	if x != nil {
		return x.InstanceGroupList
	}
	return nil
}

func (x *Suite) GetCommon() *CommonMessages {
	if x != nil {
		return x.Common
	}
	return nil
}

// InstanceGroup is a list of openconfig.test.Instances to run in parallel.
// RPC requests for tests in this group will be made in parallel.
type InstanceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the instance group. Used for reporting purposes.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Name of the openconfig.test.Instances to run in parallel.
	Instance []*Instance `protobuf:"bytes,2,rep,name=instance,proto3" json:"instance,omitempty"`
	// Whether the failure of a test within the InstanceGroup should be considered
	// fatal for the Suite. If set to true, when one or more of the tests within
	// the group fails, all subsequent groups are not executed.
	Fatal bool `protobuf:"varint,3,opt,name=fatal,proto3" json:"fatal,omitempty"`
}

func (x *InstanceGroup) Reset() {
	*x = InstanceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_suite_suite_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroup) ProtoMessage() {}

func (x *InstanceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_suite_suite_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroup.ProtoReflect.Descriptor instead.
func (*InstanceGroup) Descriptor() ([]byte, []int) {
	return file_proto_suite_suite_proto_rawDescGZIP(), []int{1}
}

func (x *InstanceGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstanceGroup) GetInstance() []*Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceGroup) GetFatal() bool {
	if x != nil {
		return x.Fatal
	}
	return false
}

// Instance is what the framework treats as a test. It contains all the
// information to run and report a test.
type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the Instance. Used for reporting purposes.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Test configuration to use.
	Test *tests.Test `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
	// List of openconfig.test.ExtensionList to run as part of this test.
	// The tests run within the same context as the test specified in
	// this message - and have access to the same requests (e.g.,
	// subscription in the case of Subscribe tests).
	ExtensionList []string `protobuf:"bytes,3,rep,name=extension_list,json=extensionList,proto3" json:"extension_list,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_suite_suite_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_suite_suite_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_proto_suite_suite_proto_rawDescGZIP(), []int{2}
}

func (x *Instance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Instance) GetTest() *tests.Test {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *Instance) GetExtensionList() []string {
	if x != nil {
		return x.ExtensionList
	}
	return nil
}

// ExtensionList is a list of extensions. They run as part of the subscription
// created for the parent test in openconfig.test.Instance.
type ExtensionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extension []*tests.Test `protobuf:"bytes,1,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ExtensionList) Reset() {
	*x = ExtensionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_suite_suite_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionList) ProtoMessage() {}

func (x *ExtensionList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_suite_suite_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionList.ProtoReflect.Descriptor instead.
func (*ExtensionList) Descriptor() ([]byte, []int) {
	return file_proto_suite_suite_proto_rawDescGZIP(), []int{3}
}

func (x *ExtensionList) GetExtension() []*tests.Test {
	if x != nil {
		return x.Extension
	}
	return nil
}

// CommonMessages specifies a set of gNMI messages that are referred to
// across multiple tests. This ensures that where the same message is required
// (e.g., a SetRequest that specifies a safe initial configuration) then it
// does not require repetition in the test specification.
//
// Each specificiation is a map keyed by a unique identifying name for the
// message value of the map.
type CommonMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetRequests       map[string]*gnmi.SetRequest       `protobuf:"bytes,1,rep,name=set_requests,json=setRequests,proto3" json:"set_requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GetRequests       map[string]*gnmi.GetRequest       `protobuf:"bytes,3,rep,name=get_requests,json=getRequests,proto3" json:"get_requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GetResponses      map[string]*gnmi.GetResponse      `protobuf:"bytes,4,rep,name=get_responses,json=getResponses,proto3" json:"get_responses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubscribeRequests map[string]*gnmi.SubscribeRequest `protobuf:"bytes,5,rep,name=subscribe_requests,json=subscribeRequests,proto3" json:"subscribe_requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CommonMessages) Reset() {
	*x = CommonMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_suite_suite_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMessages) ProtoMessage() {}

func (x *CommonMessages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_suite_suite_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMessages.ProtoReflect.Descriptor instead.
func (*CommonMessages) Descriptor() ([]byte, []int) {
	return file_proto_suite_suite_proto_rawDescGZIP(), []int{4}
}

func (x *CommonMessages) GetSetRequests() map[string]*gnmi.SetRequest {
	if x != nil {
		return x.SetRequests
	}
	return nil
}

func (x *CommonMessages) GetGetRequests() map[string]*gnmi.GetRequest {
	if x != nil {
		return x.GetRequests
	}
	return nil
}

func (x *CommonMessages) GetGetResponses() map[string]*gnmi.GetResponse {
	if x != nil {
		return x.GetResponses
	}
	return nil
}

func (x *CommonMessages) GetSubscribeRequests() map[string]*gnmi.SubscribeRequest {
	if x != nil {
		return x.SubscribeRequests
	}
	return nil
}

var File_proto_suite_suite_proto protoreflect.FileDescriptor

var file_proto_suite_suite_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x67, 0x6e, 0x6d, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x2f,
	0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x03, 0x0a, 0x05, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x56, 0x0a, 0x12, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x74, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x22, 0x74, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3a,
	0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x05, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x0c, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x69,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x5b, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x50,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_suite_suite_proto_rawDescOnce sync.Once
	file_proto_suite_suite_proto_rawDescData = file_proto_suite_suite_proto_rawDesc
)

func file_proto_suite_suite_proto_rawDescGZIP() []byte {
	file_proto_suite_suite_proto_rawDescOnce.Do(func() {
		file_proto_suite_suite_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_suite_suite_proto_rawDescData)
	})
	return file_proto_suite_suite_proto_rawDescData
}

var file_proto_suite_suite_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_suite_suite_proto_goTypes = []interface{}{
	(*Suite)(nil),                 // 0: suite.Suite
	(*InstanceGroup)(nil),         // 1: suite.InstanceGroup
	(*Instance)(nil),              // 2: suite.Instance
	(*ExtensionList)(nil),         // 3: suite.ExtensionList
	(*CommonMessages)(nil),        // 4: suite.CommonMessages
	nil,                           // 5: suite.Suite.ExtensionListEntry
	nil,                           // 6: suite.CommonMessages.SetRequestsEntry
	nil,                           // 7: suite.CommonMessages.GetRequestsEntry
	nil,                           // 8: suite.CommonMessages.GetResponsesEntry
	nil,                           // 9: suite.CommonMessages.SubscribeRequestsEntry
	(*tests.Connection)(nil),      // 10: tests.Connection
	(*tests.Test)(nil),            // 11: tests.Test
	(*gnmi.SetRequest)(nil),       // 12: gnmi.SetRequest
	(*gnmi.GetRequest)(nil),       // 13: gnmi.GetRequest
	(*gnmi.GetResponse)(nil),      // 14: gnmi.GetResponse
	(*gnmi.SubscribeRequest)(nil), // 15: gnmi.SubscribeRequest
}
var file_proto_suite_suite_proto_depIdxs = []int32{
	10, // 0: suite.Suite.connection:type_name -> tests.Connection
	5,  // 1: suite.Suite.extension_list:type_name -> suite.Suite.ExtensionListEntry
	1,  // 2: suite.Suite.instance_group_list:type_name -> suite.InstanceGroup
	4,  // 3: suite.Suite.common:type_name -> suite.CommonMessages
	2,  // 4: suite.InstanceGroup.instance:type_name -> suite.Instance
	11, // 5: suite.Instance.test:type_name -> tests.Test
	11, // 6: suite.ExtensionList.extension:type_name -> tests.Test
	6,  // 7: suite.CommonMessages.set_requests:type_name -> suite.CommonMessages.SetRequestsEntry
	7,  // 8: suite.CommonMessages.get_requests:type_name -> suite.CommonMessages.GetRequestsEntry
	8,  // 9: suite.CommonMessages.get_responses:type_name -> suite.CommonMessages.GetResponsesEntry
	9,  // 10: suite.CommonMessages.subscribe_requests:type_name -> suite.CommonMessages.SubscribeRequestsEntry
	3,  // 11: suite.Suite.ExtensionListEntry.value:type_name -> suite.ExtensionList
	12, // 12: suite.CommonMessages.SetRequestsEntry.value:type_name -> gnmi.SetRequest
	13, // 13: suite.CommonMessages.GetRequestsEntry.value:type_name -> gnmi.GetRequest
	14, // 14: suite.CommonMessages.GetResponsesEntry.value:type_name -> gnmi.GetResponse
	15, // 15: suite.CommonMessages.SubscribeRequestsEntry.value:type_name -> gnmi.SubscribeRequest
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_proto_suite_suite_proto_init() }
func file_proto_suite_suite_proto_init() {
	if File_proto_suite_suite_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_suite_suite_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_suite_suite_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_suite_suite_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_suite_suite_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_suite_suite_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_suite_suite_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_suite_suite_proto_goTypes,
		DependencyIndexes: file_proto_suite_suite_proto_depIdxs,
		MessageInfos:      file_proto_suite_suite_proto_msgTypes,
	}.Build()
	File_proto_suite_suite_proto = out.File
	file_proto_suite_suite_proto_rawDesc = nil
	file_proto_suite_suite_proto_goTypes = nil
	file_proto_suite_suite_proto_depIdxs = nil
}
