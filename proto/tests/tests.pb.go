//
//Copyright 2018 Google LLC
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//https://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.6.1
// source: proto/tests/tests.proto

package tests

import (
	proto "github.com/golang/protobuf/proto"
	gnmi "github.com/openconfig/gnmi/proto/gnmi"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OperResult specifies the expected result of an operation. By
// default an operation is expected to succeed.
type GetSetValidationOper_OperResult int32

const (
	GetSetValidationOper_NO_ERROR GetSetValidationOper_OperResult = 0
	GetSetValidationOper_FAILED   GetSetValidationOper_OperResult = 1
)

// Enum value maps for GetSetValidationOper_OperResult.
var (
	GetSetValidationOper_OperResult_name = map[int32]string{
		0: "NO_ERROR",
		1: "FAILED",
	}
	GetSetValidationOper_OperResult_value = map[string]int32{
		"NO_ERROR": 0,
		"FAILED":   1,
	}
)

func (x GetSetValidationOper_OperResult) Enum() *GetSetValidationOper_OperResult {
	p := new(GetSetValidationOper_OperResult)
	*p = x
	return p
}

func (x GetSetValidationOper_OperResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSetValidationOper_OperResult) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tests_tests_proto_enumTypes[0].Descriptor()
}

func (GetSetValidationOper_OperResult) Type() protoreflect.EnumType {
	return &file_proto_tests_tests_proto_enumTypes[0]
}

func (x GetSetValidationOper_OperResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSetValidationOper_OperResult.Descriptor instead.
func (GetSetValidationOper_OperResult) EnumDescriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{13, 0}
}

// Default message to use if test doesn't need any arguments. Default message
// will be type of the field in the message. The name of the field discriminates
// one test from another.
type Default struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Default) Reset() {
	*x = Default{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Default) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Default) ProtoMessage() {}

func (x *Default) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Default.ProtoReflect.Descriptor instead.
func (*Default) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{0}
}

// Message that contains all the information specific to a gnmi Subscribe RPC.
type SubscribeTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request to use by framework during gnmi Subscribe RPC. If test is part of
	// an extension list, a real subscription isn't created, but the query is
	// registered to receive updates corresponding to its path from subscription
	// of parent test.
	Request *gnmi.SubscribeRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// log_responses indicates to the test whether it should log all
	// SubscribeResponse messages that are received from the target.
	LogResponses bool `protobuf:"varint,2,opt,name=log_responses,json=logResponses,proto3" json:"log_responses,omitempty"`
	// ignore_invalid_paths specifies whether invalid paths that are received
	// from the target should be ignored, or treated as a test error. If this
	// field is set to a non-nil value, then errors in deserialisation are
	// ignored by the test.
	//
	// USE CAUTION WHEN ENABLING THIS OPTION - since invalid output from the
	// target will not be treated as an error. It should be used solely when
	// the test pass/fail criteria DO NOT depend on the correctness of all
	// updates.
	IgnoreInvalidPaths bool `protobuf:"varint,3,opt,name=ignore_invalid_paths,json=ignoreInvalidPaths,proto3" json:"ignore_invalid_paths,omitempty"`
	// Types that are assignable to Args:
	//	*SubscribeTest_FakeTest
	//	*SubscribeTest_PathValidation
	//	*SubscribeTest_HasKeys
	//	*SubscribeTest_SchemapathComplete
	//	*SubscribeTest_DataTreePaths
	//	*SubscribeTest_ValueValidation
	//	*SubscribeTest_GnmipathCompliance
	Args isSubscribeTest_Args `protobuf_oneof:"args"`
}

func (x *SubscribeTest) Reset() {
	*x = SubscribeTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTest) ProtoMessage() {}

func (x *SubscribeTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTest.ProtoReflect.Descriptor instead.
func (*SubscribeTest) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeTest) GetRequest() *gnmi.SubscribeRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SubscribeTest) GetLogResponses() bool {
	if x != nil {
		return x.LogResponses
	}
	return false
}

func (x *SubscribeTest) GetIgnoreInvalidPaths() bool {
	if x != nil {
		return x.IgnoreInvalidPaths
	}
	return false
}

func (m *SubscribeTest) GetArgs() isSubscribeTest_Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (x *SubscribeTest) GetFakeTest() string {
	if x, ok := x.GetArgs().(*SubscribeTest_FakeTest); ok {
		return x.FakeTest
	}
	return ""
}

func (x *SubscribeTest) GetPathValidation() *Default {
	if x, ok := x.GetArgs().(*SubscribeTest_PathValidation); ok {
		return x.PathValidation
	}
	return nil
}

func (x *SubscribeTest) GetHasKeys() *HasKeys {
	if x, ok := x.GetArgs().(*SubscribeTest_HasKeys); ok {
		return x.HasKeys
	}
	return nil
}

func (x *SubscribeTest) GetSchemapathComplete() *SchemaPathComplete {
	if x, ok := x.GetArgs().(*SubscribeTest_SchemapathComplete); ok {
		return x.SchemapathComplete
	}
	return nil
}

func (x *SubscribeTest) GetDataTreePaths() *DataTreePaths {
	if x, ok := x.GetArgs().(*SubscribeTest_DataTreePaths); ok {
		return x.DataTreePaths
	}
	return nil
}

func (x *SubscribeTest) GetValueValidation() *Default {
	if x, ok := x.GetArgs().(*SubscribeTest_ValueValidation); ok {
		return x.ValueValidation
	}
	return nil
}

func (x *SubscribeTest) GetGnmipathCompliance() *GNMIPathCompliance {
	if x, ok := x.GetArgs().(*SubscribeTest_GnmipathCompliance); ok {
		return x.GnmipathCompliance
	}
	return nil
}

type isSubscribeTest_Args interface {
	isSubscribeTest_Args()
}

type SubscribeTest_FakeTest struct {
	FakeTest string `protobuf:"bytes,10,opt,name=fake_test,json=fakeTest,proto3,oneof"`
}

type SubscribeTest_PathValidation struct {
	PathValidation *Default `protobuf:"bytes,11,opt,name=path_validation,json=pathValidation,proto3,oneof"`
}

type SubscribeTest_HasKeys struct {
	HasKeys *HasKeys `protobuf:"bytes,12,opt,name=has_keys,json=hasKeys,proto3,oneof"`
}

type SubscribeTest_SchemapathComplete struct {
	SchemapathComplete *SchemaPathComplete `protobuf:"bytes,13,opt,name=schemapath_complete,json=schemapathComplete,proto3,oneof"`
}

type SubscribeTest_DataTreePaths struct {
	DataTreePaths *DataTreePaths `protobuf:"bytes,14,opt,name=data_tree_paths,json=dataTreePaths,proto3,oneof"`
}

type SubscribeTest_ValueValidation struct {
	ValueValidation *Default `protobuf:"bytes,15,opt,name=value_validation,json=valueValidation,proto3,oneof"`
}

type SubscribeTest_GnmipathCompliance struct {
	GnmipathCompliance *GNMIPathCompliance `protobuf:"bytes,16,opt,name=gnmipath_compliance,json=gnmipathCompliance,proto3,oneof"`
}

func (*SubscribeTest_FakeTest) isSubscribeTest_Args() {}

func (*SubscribeTest_PathValidation) isSubscribeTest_Args() {}

func (*SubscribeTest_HasKeys) isSubscribeTest_Args() {}

func (*SubscribeTest_SchemapathComplete) isSubscribeTest_Args() {}

func (*SubscribeTest_DataTreePaths) isSubscribeTest_Args() {}

func (*SubscribeTest_ValueValidation) isSubscribeTest_Args() {}

func (*SubscribeTest_GnmipathCompliance) isSubscribeTest_Args() {}

// Test specifies a gNMI test. The type indicates the form of test that is
// being performed.
//
// The authentication for the RPC(s) used in the test is specified in
// username_key and password_key. These values are references to an external
// storage of authentication data that can be retrieved by the framework.
type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the individual test to use for reporting purposes.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Amount of time in seconds test is allowed to run before cancelled.
	Timeout int32 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// The compiled schema that should be used within the test.
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// Connection parameters to dial into target. If not specified, the one
	// specified by Suite proto is used.
	Connection *Connection `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection,omitempty"`
	// Can be extended to include other gNMI RPCs.
	//
	// Types that are assignable to Type:
	//	*Test_Subscribe
	//	*Test_GetSet
	//	*Test_FakeTest
	Type isTest_Type `protobuf_oneof:"type"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{2}
}

func (x *Test) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Test) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Test) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Test) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (m *Test) GetType() isTest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Test) GetSubscribe() *SubscribeTest {
	if x, ok := x.GetType().(*Test_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *Test) GetGetSet() *GetSetTest {
	if x, ok := x.GetType().(*Test_GetSet); ok {
		return x.GetSet
	}
	return nil
}

func (x *Test) GetFakeTest() *FakeTest {
	if x, ok := x.GetType().(*Test_FakeTest); ok {
		return x.FakeTest
	}
	return nil
}

type isTest_Type interface {
	isTest_Type()
}

type Test_Subscribe struct {
	Subscribe *SubscribeTest `protobuf:"bytes,10,opt,name=subscribe,proto3,oneof"`
}

type Test_GetSet struct {
	GetSet *GetSetTest `protobuf:"bytes,11,opt,name=get_set,json=getSet,proto3,oneof"`
}

type Test_FakeTest struct {
	// fake_test is used to verify the functionality of the test running
	// framework.
	FakeTest *FakeTest `protobuf:"bytes,12,opt,name=fake_test,json=fakeTest,proto3,oneof"`
}

func (*Test_Subscribe) isTest_Type() {}

func (*Test_GetSet) isTest_Type() {}

func (*Test_FakeTest) isTest_Type() {}

// Credentials to use while connecting to target.
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resolver value is used to determine which credentials resolver to pick
	// while resolving username and password to use during gNMI connection. By
	// default, plaintext resolver is used if nothing is specified here. If a
	// special resolver is needed, it needs to be registered into global resolvers
	// table.
	Resolver string `protobuf:"bytes,1,opt,name=resolver,proto3" json:"resolver,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{3}
}

func (x *Credentials) GetResolver() string {
	if x != nil {
		return x.Resolver
	}
	return ""
}

func (x *Credentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Credentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Connection contains required information to be able to dial into a target.
type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the target to be set in gNMI messages. For gNMI implementations
	// that can be address multiple targets, this value can be used to specify
	// which one should be the device under test.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Address is used while dialing into gNMI server under test. It needs to be
	// in the form "host:port" or it should resolve to a "host:port".
	Address     string       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Credentials *Credentials `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// Dial timeout in seconds while connecting to gNMI server under test.
	Timeout int32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{4}
}

func (x *Connection) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Connection) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Connection) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *Connection) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// FakeTest is the configuration used for a fake test within the framework.
type FakeTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pass indicates whether the faked test should pass or fail.
	Pass bool `protobuf:"varint,1,opt,name=pass,proto3" json:"pass,omitempty"`
}

func (x *FakeTest) Reset() {
	*x = FakeTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FakeTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FakeTest) ProtoMessage() {}

func (x *FakeTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FakeTest.ProtoReflect.Descriptor instead.
func (*FakeTest) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{5}
}

func (x *FakeTest) GetPass() bool {
	if x != nil {
		return x.Pass
	}
	return false
}

// HasKeys defines the input for a test that checks that a particular list
// in the schema has a specified set of keys in the list. It can be used
// to check for data completeness of a particular list within the schema.
type HasKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the list that should be checked.
	Path *gnmi.Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Items that should be found in the list.
	Item []*HasKeys_Item `protobuf:"bytes,2,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *HasKeys) Reset() {
	*x = HasKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasKeys) ProtoMessage() {}

func (x *HasKeys) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasKeys.ProtoReflect.Descriptor instead.
func (*HasKeys) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{6}
}

func (x *HasKeys) GetPath() *gnmi.Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *HasKeys) GetItem() []*HasKeys_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

// GNMIPathCompliance defines the test to validate target and origin fields of
// gNMI Path as well as usage of Elem field instead of deprecated Element field.
// If check_target and/or check_origin fields are set to "*", corresponding
// field in gNMI prefix path must exist, but can be any value. If they are set
// to a value other than "*", corresponding field must be equal to the value. If
// check_target and/or check_origin isn't set or set to an empty string, this
// means no validation is needed on the corresponding field. For instance:
//
// {
//   // target must exist, but can have any value other than empty string
//   check_target: "*"
//   // origin must exist and be equal to "openconfig"
//   check_origin: "openconfig"
//   // Elem field of gNMI Path must be used instead of Element field
//   check_elem: true
// }
type GNMIPathCompliance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckElem   bool   `protobuf:"varint,1,opt,name=check_elem,json=checkElem,proto3" json:"check_elem,omitempty"`
	CheckTarget string `protobuf:"bytes,2,opt,name=check_target,json=checkTarget,proto3" json:"check_target,omitempty"`
	CheckOrigin string `protobuf:"bytes,3,opt,name=check_origin,json=checkOrigin,proto3" json:"check_origin,omitempty"`
}

func (x *GNMIPathCompliance) Reset() {
	*x = GNMIPathCompliance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GNMIPathCompliance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNMIPathCompliance) ProtoMessage() {}

func (x *GNMIPathCompliance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNMIPathCompliance.ProtoReflect.Descriptor instead.
func (*GNMIPathCompliance) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{7}
}

func (x *GNMIPathCompliance) GetCheckElem() bool {
	if x != nil {
		return x.CheckElem
	}
	return false
}

func (x *GNMIPathCompliance) GetCheckTarget() string {
	if x != nil {
		return x.CheckTarget
	}
	return ""
}

func (x *GNMIPathCompliance) GetCheckOrigin() string {
	if x != nil {
		return x.CheckOrigin
	}
	return ""
}

// DataTreePaths specifies a test which allows for checks for the
// existence of particular data within the data tree. It allows recursion
// into lists, or simple queries for data tree paths.
//
// A test which performs a simple check for a data tree path consists
// of a single TestQuery, which specifies the path to be queried. For example,
// to query for the existence of the
// /interfaces/interface[name=eth0]/state/counters/{in,out}-pkts leaves in the
// received data a query specifying:
//
// {
//   steps { name: "interfaces" }
//   steps { name: "interface" key { name: "name" value: "eth0" } }
//   required_paths {
//     prefix {
//       elem { name: "state" }
//       elem { name: "counters" }
//     }
//     paths { elem { name: "in-pkts" } }
//     paths { elem { name: "out-pkts" } }
//   }
// }
//
// is specified. This query is simply expanded to check for the specified paths.
//
// The test also supports querying recursively down the data tree using the
// GetListKeys message within a particular TestQuery. Such a query specifies
// that the query described by the "steps" repeated should be made, and the
// resulting key values of the list found should be assigned into an array.
// Subsequent nested queries can then refer to a value within that array using
// the variable name specified.
//
// For example, if a test wishes to performn a check for
// each interface within the data tree, then nested TestQuery
// messages are required. The first retrieves the keys of the
// /interfaces/interface list from the data tree - and calls a nested TestQuery
// for each key within the /interfaces/interface list (referred to as
// %%interface%%) which performs the actual check:
//
// {
//   steps { name: "interfaces" }
//   steps { name: "interface"  }
//   get_list_keys {
//     var_name: "%%interface%%"
//     next_query {
//       steps { name: "interfaces" }
//       steps { name: "interface" key_name: "%%interface%%" }
//       required_paths {
//         prefix: {
//           elem: "state"
//           elem: "counters"
//        }
//        paths { elem { name: "in-pkts" } }
//        paths { elem { name: "out-pkts" } }
//      }
//    }
//   }
// }
//
// Will execute first a query for /interfaces/interface and assign the
// results to the %%interface%% variable. The child operation will execute
// for each element of the %%interface%% list, and subsequently make a query
// for /interfaces/interface[%%interface%%] where %%interface%% is an individual
// key found in the parent query (e.g., "name=eth0"). The child operation
// checks for the required paths at state/counters/{in,out}-pkts relative to
// the query made in the ListQuery operation.
//
// Where multiple get_list_keys queries are nested, each next_query is called
// for each value of its parent query, such that it is possible to express
// nested list traversals such as:
//
// foreach interface in /interfaces/interface:
//   foreach subinterface of that interface:
//     foreach ipv4 address of that subinterface:
//       ... etc ...
//
//  using nested queries:
//
//  {
//    steps { name: "interfaces" }
//    steps { name: "interface" }
//    get_list_keys {
//      var_name: "%%interface%%"
//      next_query {
//        steps { name: "interfaces" }
//        steps { name: "interface" key_name: "%%interface%%" }
//        steps { name: "subinterfaces" }
//        steps { name: "subinterface" }
//        get_list_keys {
//          var_name: "%%subinterface%%"
//          next_query {
//            steps { name: "interfaces" }
//            steps { name: "interface" key_name: "%%interface%%" }
//            steps { name: "subinterfaces" }
//            steps { name: "subinterface" key_name: "%%subinterface%%" }
//            steps { name: "ipv4" }
//            steps { name: "addresses" }
//            steps { name: "address" }
//            get_list_keys {
//              var_name: "%%v4address%%"
//              next_query {
//                steps { name: "interfaces" }
//                steps { name: "interface" key_name: "%%interface%%" }
//                steps { name: "subinterfaces" }
//                steps { name: "subinterface" key_name: "%%subinterface%%" }
//                steps { name: "ipv4" }
//                steps { name: "addresses" }
//                steps { name: "address"  key_name: "%%v4address%%" }
//                required_paths {
//                  ... actual test with required paths ...
//                }
//              }
//            }
//          }
//        }
//      }
//    }
//  }
//
//
// The filter field within a TestQuery can be used to filter the set of list
// items that are to be iterated over. When a PathValueMatch filter is
// specified, its contents are evaluated, and only when the result of the match
// is true is the item in the list iterated over.
//
// For example, it is possible to iterate over components of a particular type
// within the OpenConfig schema by specifying a filter:
//
// {
//   steps: { name: "components" }
//   steps: { name: "component" }
//   get_list_keys {
//     var_name: "%%component_name%%"
//     filter {
//       path {
//         elem { name: "state" }
//         elem { name: "type" }
//       }
//       equal { string_val: "TRANSCEIVER" }
//     }
//     next_query {
//       steps: { name: "components" }
//       steps: { name: "component" key_name: "%%component_name%%" }
//       required_paths {
//         prefix { name: "state" }
//         paths { name: "mfg-name" }
//         paths { name: "serial-no" }
//       }
//     }
//   }
// }
//
// The get_list_keys query is filtered according to the criteria described in
// the "filter". The path specified in this message must be relative to the
// current selection.
//
// It is also possible to filter based on multiple queries, using the "and" and
// "or" fields of the PathValueMatch message, for example, to filter on
// components of type LINECARD or PORT, the following PathValueMatch is
// specified:
//
// {
//   path {
//     elem { name: "state" }
//     elem { name: "type" }
//   }
//   equal { string_val: "LINECARD" }
//   or {
//     path {
//       elem { name: "state" }
//       elem { name: "type" }
//     }
//     equal { string_val: PORT" }
//   }
// }
//
// The "or" field specifies that a PathValueMatch should be evaluated to true if
// the parent or any "or" query evaluates to true.
//
// If multiple filters, are required, for example, to match multiple list keys,
// the "and" field can be used within a PathValueMatch:
//
// {
//   // Assume we are within a query of the
//   // network-instances/network-instance/protocols/protocol list.
//   path {
//     elem { name: "state" }
//     elem { name: "identifier" }
//   }
//   equal { string_val: "BGP" }
//   and {
//     path {
//       elem { name: "state" }
//       elem { name: "name" }
//     }
//     equal { string_val: "15169" }
//   }
// }
//
// As well as requiring a specific set of paths to exist, the datatreepaths test
// can be used to test values within the data tree, using the required_values
// field. For example, to validate that all non-logical interfaces have LLDP
// enabled, the following query can be formulated -- checking that
// /lldp/interfaces/interface[name=<if-name>]/state/enabled = true:
//
// {
//   steps { name: "interfaces" }
//   steps { name: "interface" }
//   get_list_keys {
//     var_name: "<if-name>"
//     filter {
//       path {
//         elem { name: "state" }
//         elem { name: "logical" }
//       }
//       equal { bool_val: false }
//     }
//     next_query {
//       steps { name: "lldp" }
//       steps { name: "interfaces" }
//       steps { name: "interface" key_name: "<if-name>" }
//       required_values {
//         prefix {
//           elem { name: "state" }
//         }
//         matches {
//           path {
//             elem { name: "enabled" }
//           }
//           equal { bool_val: true }
//         }
//       }
//     }
//   }
// }
type DataTreePaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// test_oper is the operation to be performed for the test.
	TestOper *DataTreePaths_TestQuery `protobuf:"bytes,1,opt,name=test_oper,json=testOper,proto3" json:"test_oper,omitempty"`
}

func (x *DataTreePaths) Reset() {
	*x = DataTreePaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTreePaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTreePaths) ProtoMessage() {}

func (x *DataTreePaths) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTreePaths.ProtoReflect.Descriptor instead.
func (*DataTreePaths) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{8}
}

func (x *DataTreePaths) GetTestOper() *DataTreePaths_TestQuery {
	if x != nil {
		return x.TestOper
	}
	return nil
}

// PathValueMatch specifies a match critiera for a set of gNMI paths.
// It is used to express criteria that a gNMI path must match.
//
// Both AND and OR logical expressions are contained within the PathValue
// message and explained in further detail below. The order of operations
// that is implemented within the frameworks is AND and then OR. The following
// examples illustrate the use of the message for form a variety of different
// logical expressions:
//
// (a == "a" AND b == "b" ) OR c == "c"
//
// {
//   path { elem { name: "a" } }
//   equal { string_val: "a" }
//   and {
//    path { elem { name: "b" } }
//    equal { string_val: "b" }
//   }
//   or {
//    path { elem { name: "c" } }
//    equal { string_val: "c" }
//   }
// }
//
// In this message (a AND b) is evaluated and if true, the expression returns
// true, if false, c is evaluated and the operation returns the result of the
// equality comparison.
//
// (a == "a" ) OR (b == "b" AND c == "c")
//
// {
//   path { elem { name: "a" } }
//   equal { string_val: "a" } }
//   or {
//    path { elem { name: "b" } }
//    equal { string_val: "b" }
//    and {
//      path { elem { name: "c" } }
//      equal { string_val: "c" }
//    }
//   }
// }
//
// In this message a is evaluated, and if true, the result is returned. If it is
// false, the (b AND C) criteria is evaluated in whole (since it is encapsulated
// within a new PathValue message) and the result is subsequently returned.
type PathValueMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the path to be verified. It can be absolute or relative
	// based pon the context that the PathValueMatch message is used.
	Path *gnmi.Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// criteria specifies the condition to be met for the value at the
	// path.
	//
	// Types that are assignable to Criteria:
	//	*PathValueMatch_Equal
	//	*PathValueMatch_IsUnset
	//	*PathValueMatch_IsSet
	//	*PathValueMatch_NotEqual
	Criteria isPathValueMatch_Criteria `protobuf_oneof:"criteria"`
	// and specifies a set of additional matches that must be met for
	// the test to evaluate to true. If any matches are not met, the
	// match is false.
	//
	// For example, if the following message is specified:
	// {
	//   path {
	//     elem { name: "system" }
	//     elem { name: "state" }
	//     elem { name: "hostname" }
	//   }
	//   equal { string_val: "box0" }
	//   and {
	//     path {
	//       elem { name: "system" }
	//       elem { name: "state" }
	//       elem { name: "domain-name" }
	//     }
	//     equal { string_val: "openconfig.net" }
	//   }
	//   and {
	//     path {
	//       elem { name: "system" }
	//       elem { name: "clock" }
	//       elem { name: "state" }
	//       elem { name: "timezone-name" }
	//     }
	//     equal { string_val: "Europe/London" }
	//   }
	// }
	//
	// Then the query only evaluates to true if /system/state/hostname
	// == "box0" && /system/state/domain-name == "openconfig.net" &&
	// /system/clock/state/timezone-name == "Europe/London".
	And []*PathValueMatch `protobuf:"bytes,20,rep,name=and,proto3" json:"and,omitempty"`
	// or specifies a set of matches that any one of which must be
	// met for the test to evaluate to true.
	//
	// For example, if the following message is spceified:
	//
	// {
	//   or {
	//     path {
	//       elem { name: "system" }
	//       elem { name: "state" }
	//       elem { name: "hostname" }
	//     }
	//     equal { string_val: "box0.openconfig.net" }
	//     and {
	//       path {
	//         elem { name: "system" }
	//         elem { name: "state" }
	//         elem { name: "domain-name" }
	//       }
	//       equal { string_val: "openconfig.net" }
	//   }
	//   or {
	//     path {
	//       elem { name: "system" }
	//       elem { name: "state" }
	//       elem { name: "hostname" }
	//     }
	//     equal { string_val: "box0" }
	//     and {
	//       path {
	//         elem { name: "system" }
	//         elem { name: "state" }
	//         elem { name: "domain-name" }
	//       }
	//       equal { string_val: "openconfig.net" }
	//     }
	//   }
	// }
	//
	// Then the query only evaluates to true if:
	//  (/system/state/hostname == "box0.openconfig.net" &&
	//  /system/state/domain-name == "openconfig") ||
	//  (/system/state/hostname == "box0" && /system/state/domain-name ==
	//  "openconfig.net")
	//
	//  In this case, the top-level query has no specified path or criteria. Such
	//  a query evaluates to true to allow such nesting.
	Or []*PathValueMatch `protobuf:"bytes,21,rep,name=or,proto3" json:"or,omitempty"`
}

func (x *PathValueMatch) Reset() {
	*x = PathValueMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathValueMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathValueMatch) ProtoMessage() {}

func (x *PathValueMatch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathValueMatch.ProtoReflect.Descriptor instead.
func (*PathValueMatch) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{9}
}

func (x *PathValueMatch) GetPath() *gnmi.Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (m *PathValueMatch) GetCriteria() isPathValueMatch_Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (x *PathValueMatch) GetEqual() *gnmi.TypedValue {
	if x, ok := x.GetCriteria().(*PathValueMatch_Equal); ok {
		return x.Equal
	}
	return nil
}

func (x *PathValueMatch) GetIsUnset() bool {
	if x, ok := x.GetCriteria().(*PathValueMatch_IsUnset); ok {
		return x.IsUnset
	}
	return false
}

func (x *PathValueMatch) GetIsSet() bool {
	if x, ok := x.GetCriteria().(*PathValueMatch_IsSet); ok {
		return x.IsSet
	}
	return false
}

func (x *PathValueMatch) GetNotEqual() *gnmi.TypedValue {
	if x, ok := x.GetCriteria().(*PathValueMatch_NotEqual); ok {
		return x.NotEqual
	}
	return nil
}

func (x *PathValueMatch) GetAnd() []*PathValueMatch {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *PathValueMatch) GetOr() []*PathValueMatch {
	if x != nil {
		return x.Or
	}
	return nil
}

type isPathValueMatch_Criteria interface {
	isPathValueMatch_Criteria()
}

type PathValueMatch_Equal struct {
	// equal is a gNMI TypedValue that the value found at the path must
	// be equal to.
	Equal *gnmi.TypedValue `protobuf:"bytes,2,opt,name=equal,proto3,oneof"`
}

type PathValueMatch_IsUnset struct {
	// is_unset specifies that the value found at the path must not be
	// set in the schema.
	IsUnset bool `protobuf:"varint,3,opt,name=is_unset,json=isUnset,proto3,oneof"`
}

type PathValueMatch_IsSet struct {
	// is_set specifies that the value found at the path must be set -
	// it is typically used to filter based on a particular container
	// existing.
	IsSet bool `protobuf:"varint,4,opt,name=is_set,json=isSet,proto3,oneof"`
}

type PathValueMatch_NotEqual struct {
	// not_equal specifies a gNMI TypedValue that the value found at the
	// path must not be equal to.
	NotEqual *gnmi.TypedValue `protobuf:"bytes,5,opt,name=not_equal,json=notEqual,proto3,oneof"`
}

func (*PathValueMatch_Equal) isPathValueMatch_Criteria() {}

func (*PathValueMatch_IsUnset) isPathValueMatch_Criteria() {}

func (*PathValueMatch_IsSet) isPathValueMatch_Criteria() {}

func (*PathValueMatch_NotEqual) isPathValueMatch_Criteria() {}

// SchemaPathComplete defines the input for a test that checks that at least
// one instance of a particular schema path is sent to the test framework. It
// can be used to check for path coverage of a particular target.
type SchemaPathComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// prefix is a gNMI path that should be appended to each path in the
	// paths list to form an absolute schema path.
	Prefix *gnmi.Path `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// paths is the list of paths that are expected to be received by the
	// test framework.
	Path []*gnmi.Path `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *SchemaPathComplete) Reset() {
	*x = SchemaPathComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaPathComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaPathComplete) ProtoMessage() {}

func (x *SchemaPathComplete) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaPathComplete.ProtoReflect.Descriptor instead.
func (*SchemaPathComplete) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{10}
}

func (x *SchemaPathComplete) GetPrefix() *gnmi.Path {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *SchemaPathComplete) GetPath() []*gnmi.Path {
	if x != nil {
		return x.Path
	}
	return nil
}

// GetSetTest contains all the information specific to a configuration
// test - which is expected to use RPCs to interact with configuration. Set is
// used to change the configuration, and Get or Subscribe can be used to
// retrieve configuration values to verify the target's initial or final states.
type GetSetTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Args:
	//	*GetSetTest_OperValidation
	Args isGetSetTest_Args `protobuf_oneof:"args"`
}

func (x *GetSetTest) Reset() {
	*x = GetSetTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSetTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSetTest) ProtoMessage() {}

func (x *GetSetTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSetTest.ProtoReflect.Descriptor instead.
func (*GetSetTest) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{11}
}

func (m *GetSetTest) GetArgs() isGetSetTest_Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (x *GetSetTest) GetOperValidation() *GetSetValidationTest {
	if x, ok := x.GetArgs().(*GetSetTest_OperValidation); ok {
		return x.OperValidation
	}
	return nil
}

type isGetSetTest_Args interface {
	isGetSetTest_Args()
}

type GetSetTest_OperValidation struct {
	OperValidation *GetSetValidationTest `protobuf:"bytes,10,opt,name=oper_validation,json=operValidation,proto3,oneof"`
}

func (*GetSetTest_OperValidation) isGetSetTest_Args() {}

// GetSetValidationTest describes a test that validates configuration sets
// on a target. It does not validate the underlying behaviour of the system,
// but restricts itself to validating that setting and retrieving configuration
// returns the expected result.
//
// The expected test methodology is as follows:
//   1. Set the configuration of the target to a "known good" initial state.
//   2. Validate that the configuration running on the target matches this
//      state.
//   3. Perform an update or replace operation on the configuration.
//   4. Validate that the new state of the target matches that which is
//      expected.
type GetSetValidationTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// initialise_oper is the operation to initialise the target. It may consist
	// of a configuration to be set and/or get request that validates the target's
	// current state.
	InitialiseOper *GetSetValidationOper `protobuf:"bytes,1,opt,name=initialise_oper,json=initialiseOper,proto3" json:"initialise_oper,omitempty"`
	// test_oper is the operation that is under test in the validation test.  The
	// Get and/or Set operations may be set within the operation such that the
	// test can validate a set, a set followed by a get, or solely a get
	// operation.
	TestOper *GetSetValidationOper `protobuf:"bytes,2,opt,name=test_oper,json=testOper,proto3" json:"test_oper,omitempty"`
}

func (x *GetSetValidationTest) Reset() {
	*x = GetSetValidationTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSetValidationTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSetValidationTest) ProtoMessage() {}

func (x *GetSetValidationTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSetValidationTest.ProtoReflect.Descriptor instead.
func (*GetSetValidationTest) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{12}
}

func (x *GetSetValidationTest) GetInitialiseOper() *GetSetValidationOper {
	if x != nil {
		return x.InitialiseOper
	}
	return nil
}

func (x *GetSetValidationTest) GetTestOper() *GetSetValidationOper {
	if x != nil {
		return x.TestOper
	}
	return nil
}

// GetSetValidationOper describes an individual operation within a
// GetSetValidationTest. If the message consists of:
//
//  * Solely a SetRequest - the SetRequest is sent to the test target, and the
//    result checked against the expected error status in set_ok.
//  * Solely a GetRequest - the GetRequest is sent to the test target, and the
//    result checked against the expected GetResponse.
//  * Both a SetRequest and a GetRequest - the SetRequest is sent to the test
//    target, and the return value compared against set_ok. Subsequently, the
//    GetRequest is sent to the test target, the return code compared to get_ok
//    and the GetResponse compared to the expected GetResponse.
type GetSetValidationOper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Setrequest:
	//	*GetSetValidationOper_Set
	//	*GetSetValidationOper_CommonSetrequest
	Setrequest isGetSetValidationOper_Setrequest `protobuf_oneof:"setrequest"`
	// set_ok specifies whether the Set RPC should be successful.
	SetOk GetSetValidationOper_OperResult `protobuf:"varint,10,opt,name=set_ok,json=setOk,proto3,enum=tests.GetSetValidationOper_OperResult" json:"set_ok,omitempty"`
	// Types that are assignable to Getrequest:
	//	*GetSetValidationOper_Get
	//	*GetSetValidationOper_CommonGetrequest
	Getrequest isGetSetValidationOper_Getrequest `protobuf_oneof:"getrequest"`
	GetOk      GetSetValidationOper_OperResult   `protobuf:"varint,20,opt,name=get_ok,json=getOk,proto3,enum=tests.GetSetValidationOper_OperResult" json:"get_ok,omitempty"`
	// Types that are assignable to Getresponse:
	//	*GetSetValidationOper_GetResponse
	//	*GetSetValidationOper_CommonGetresponse
	Getresponse isGetSetValidationOper_Getresponse `protobuf_oneof:"getresponse"`
}

func (x *GetSetValidationOper) Reset() {
	*x = GetSetValidationOper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSetValidationOper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSetValidationOper) ProtoMessage() {}

func (x *GetSetValidationOper) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSetValidationOper.ProtoReflect.Descriptor instead.
func (*GetSetValidationOper) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{13}
}

func (m *GetSetValidationOper) GetSetrequest() isGetSetValidationOper_Setrequest {
	if m != nil {
		return m.Setrequest
	}
	return nil
}

func (x *GetSetValidationOper) GetSet() *gnmi.SetRequest {
	if x, ok := x.GetSetrequest().(*GetSetValidationOper_Set); ok {
		return x.Set
	}
	return nil
}

func (x *GetSetValidationOper) GetCommonSetrequest() string {
	if x, ok := x.GetSetrequest().(*GetSetValidationOper_CommonSetrequest); ok {
		return x.CommonSetrequest
	}
	return ""
}

func (x *GetSetValidationOper) GetSetOk() GetSetValidationOper_OperResult {
	if x != nil {
		return x.SetOk
	}
	return GetSetValidationOper_NO_ERROR
}

func (m *GetSetValidationOper) GetGetrequest() isGetSetValidationOper_Getrequest {
	if m != nil {
		return m.Getrequest
	}
	return nil
}

func (x *GetSetValidationOper) GetGet() *gnmi.GetRequest {
	if x, ok := x.GetGetrequest().(*GetSetValidationOper_Get); ok {
		return x.Get
	}
	return nil
}

func (x *GetSetValidationOper) GetCommonGetrequest() string {
	if x, ok := x.GetGetrequest().(*GetSetValidationOper_CommonGetrequest); ok {
		return x.CommonGetrequest
	}
	return ""
}

func (x *GetSetValidationOper) GetGetOk() GetSetValidationOper_OperResult {
	if x != nil {
		return x.GetOk
	}
	return GetSetValidationOper_NO_ERROR
}

func (m *GetSetValidationOper) GetGetresponse() isGetSetValidationOper_Getresponse {
	if m != nil {
		return m.Getresponse
	}
	return nil
}

func (x *GetSetValidationOper) GetGetResponse() *gnmi.GetResponse {
	if x, ok := x.GetGetresponse().(*GetSetValidationOper_GetResponse); ok {
		return x.GetResponse
	}
	return nil
}

func (x *GetSetValidationOper) GetCommonGetresponse() string {
	if x, ok := x.GetGetresponse().(*GetSetValidationOper_CommonGetresponse); ok {
		return x.CommonGetresponse
	}
	return ""
}

type isGetSetValidationOper_Setrequest interface {
	isGetSetValidationOper_Setrequest()
}

type GetSetValidationOper_Set struct {
	// set specifies a SetRequest to be sent to the target.
	Set *gnmi.SetRequest `protobuf:"bytes,1,opt,name=set,proto3,oneof"`
}

type GetSetValidationOper_CommonSetrequest struct {
	// common_setrequest specifies a key within the Suite common_setrequests
	// to be used.
	CommonSetrequest string `protobuf:"bytes,2,opt,name=common_setrequest,json=commonSetrequest,proto3,oneof"`
}

func (*GetSetValidationOper_Set) isGetSetValidationOper_Setrequest() {}

func (*GetSetValidationOper_CommonSetrequest) isGetSetValidationOper_Setrequest() {}

type isGetSetValidationOper_Getrequest interface {
	isGetSetValidationOper_Getrequest()
}

type GetSetValidationOper_Get struct {
	// get specifies a GetRequest to be sent to the target.
	Get *gnmi.GetRequest `protobuf:"bytes,11,opt,name=get,proto3,oneof"`
}

type GetSetValidationOper_CommonGetrequest struct {
	// common_getrequest specifies a key within the Suite common_getrequests
	// to be used.
	CommonGetrequest string `protobuf:"bytes,12,opt,name=common_getrequest,json=commonGetrequest,proto3,oneof"`
}

func (*GetSetValidationOper_Get) isGetSetValidationOper_Getrequest() {}

func (*GetSetValidationOper_CommonGetrequest) isGetSetValidationOper_Getrequest() {}

type isGetSetValidationOper_Getresponse interface {
	isGetSetValidationOper_Getresponse()
}

type GetSetValidationOper_GetResponse struct {
	// get_response specifies the GetResponse that is expected from
	// the target.
	GetResponse *gnmi.GetResponse `protobuf:"bytes,21,opt,name=get_response,json=getResponse,proto3,oneof"`
}

type GetSetValidationOper_CommonGetresponse struct {
	// common_getresponse specifies a key within the Suite common_getresponses
	// to be used.
	CommonGetresponse string `protobuf:"bytes,22,opt,name=common_getresponse,json=commonGetresponse,proto3,oneof"`
}

func (*GetSetValidationOper_GetResponse) isGetSetValidationOper_Getresponse() {}

func (*GetSetValidationOper_CommonGetresponse) isGetSetValidationOper_Getresponse() {}

// Item defines an entry in the list.
type HasKeys_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key map[string]string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HasKeys_Item) Reset() {
	*x = HasKeys_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasKeys_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasKeys_Item) ProtoMessage() {}

func (x *HasKeys_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasKeys_Item.ProtoReflect.Descriptor instead.
func (*HasKeys_Item) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{6, 0}
}

func (x *HasKeys_Item) GetKey() map[string]string {
	if x != nil {
		return x.Key
	}
	return nil
}

// QueryStep defines a query against the gNMI path of a data tree element.
type DataTreePaths_QueryStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name specifies a name that should be explicitly matched in the
	// gnmi.PathElem the QueryStep is being compared to.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// key specifies the key map which should be explicitly matched in
	// the gnmi.PathElem the QueryStep is being compared to.
	Key map[string]string `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key_name specifies the name of a variable that has been written to
	// by a previous stage of the test. The value of the key map in the
	// PathElem is substituted for the value currently being iterated over
	// for the variable.
	KeyName string `protobuf:"bytes,3,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
}

func (x *DataTreePaths_QueryStep) Reset() {
	*x = DataTreePaths_QueryStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTreePaths_QueryStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTreePaths_QueryStep) ProtoMessage() {}

func (x *DataTreePaths_QueryStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTreePaths_QueryStep.ProtoReflect.Descriptor instead.
func (*DataTreePaths_QueryStep) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DataTreePaths_QueryStep) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataTreePaths_QueryStep) GetKey() map[string]string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DataTreePaths_QueryStep) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

// TestQuery specifies a single stage of a query within the test.
type DataTreePaths_TestQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// steps specifies the set of QuerySteps that should be made against the
	// data tree to retrieve the data for the operation being performed.
	Steps []*DataTreePaths_QueryStep `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	// Types that are assignable to Type:
	//	*DataTreePaths_TestQuery_GetListKeys
	//	*DataTreePaths_TestQuery_RequiredPaths
	//	*DataTreePaths_TestQuery_RequiredValues
	Type isDataTreePaths_TestQuery_Type `protobuf_oneof:"type"`
}

func (x *DataTreePaths_TestQuery) Reset() {
	*x = DataTreePaths_TestQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTreePaths_TestQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTreePaths_TestQuery) ProtoMessage() {}

func (x *DataTreePaths_TestQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTreePaths_TestQuery.ProtoReflect.Descriptor instead.
func (*DataTreePaths_TestQuery) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{8, 1}
}

func (x *DataTreePaths_TestQuery) GetSteps() []*DataTreePaths_QueryStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (m *DataTreePaths_TestQuery) GetType() isDataTreePaths_TestQuery_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DataTreePaths_TestQuery) GetGetListKeys() *DataTreePaths_ListQuery {
	if x, ok := x.GetType().(*DataTreePaths_TestQuery_GetListKeys); ok {
		return x.GetListKeys
	}
	return nil
}

func (x *DataTreePaths_TestQuery) GetRequiredPaths() *DataTreePaths_RequiredPaths {
	if x, ok := x.GetType().(*DataTreePaths_TestQuery_RequiredPaths); ok {
		return x.RequiredPaths
	}
	return nil
}

func (x *DataTreePaths_TestQuery) GetRequiredValues() *DataTreePaths_RequiredValues {
	if x, ok := x.GetType().(*DataTreePaths_TestQuery_RequiredValues); ok {
		return x.RequiredValues
	}
	return nil
}

type isDataTreePaths_TestQuery_Type interface {
	isDataTreePaths_TestQuery_Type()
}

type DataTreePaths_TestQuery_GetListKeys struct {
	// get_list_keys specifies that the query is used to retrieve a set
	// of list keys from the data tree and assign them to a variable. The
	// QuerySteps specified must therefore point to a list within the
	// data tree.
	GetListKeys *DataTreePaths_ListQuery `protobuf:"bytes,2,opt,name=get_list_keys,json=getListKeys,proto3,oneof"`
}

type DataTreePaths_TestQuery_RequiredPaths struct {
	// required_paths specifies that the query results are to be used to
	// check for required paths in the data tree.
	RequiredPaths *DataTreePaths_RequiredPaths `protobuf:"bytes,3,opt,name=required_paths,json=requiredPaths,proto3,oneof"`
}

type DataTreePaths_TestQuery_RequiredValues struct {
	// required_values specifies that the query results are to be used to
	// check whether values that are found at the path match a certain
	// criteria.
	RequiredValues *DataTreePaths_RequiredValues `protobuf:"bytes,4,opt,name=required_values,json=requiredValues,proto3,oneof"`
}

func (*DataTreePaths_TestQuery_GetListKeys) isDataTreePaths_TestQuery_Type() {}

func (*DataTreePaths_TestQuery_RequiredPaths) isDataTreePaths_TestQuery_Type() {}

func (*DataTreePaths_TestQuery_RequiredValues) isDataTreePaths_TestQuery_Type() {}

// ListQuery specifies an operation that retrieves the keys from a list.
type DataTreePaths_ListQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// var_name specifies the variable name by which the key values will
	// be referred to in subsequent queries.
	VarName string `protobuf:"bytes,1,opt,name=var_name,json=varName,proto3" json:"var_name,omitempty"`
	// next_query specifies a query that should be run for each key that
	// is retrieved by the ListQuery operation.
	NextQuery *DataTreePaths_TestQuery `protobuf:"bytes,2,opt,name=next_query,json=nextQuery,proto3" json:"next_query,omitempty"`
	// filter specifies a filter that must be met for each entry
	// in the list for it to be included in subsequent iterations. If it
	// is not set then all entries are iterated. Logical AND/ORs can
	// be specified within the filter.
	Filter *PathValueMatch `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *DataTreePaths_ListQuery) Reset() {
	*x = DataTreePaths_ListQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTreePaths_ListQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTreePaths_ListQuery) ProtoMessage() {}

func (x *DataTreePaths_ListQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTreePaths_ListQuery.ProtoReflect.Descriptor instead.
func (*DataTreePaths_ListQuery) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{8, 2}
}

func (x *DataTreePaths_ListQuery) GetVarName() string {
	if x != nil {
		return x.VarName
	}
	return ""
}

func (x *DataTreePaths_ListQuery) GetNextQuery() *DataTreePaths_TestQuery {
	if x != nil {
		return x.NextQuery
	}
	return nil
}

func (x *DataTreePaths_ListQuery) GetFilter() *PathValueMatch {
	if x != nil {
		return x.Filter
	}
	return nil
}

// RequiredPaths specifies an operation that checks for paths within
// the data tree.
type DataTreePaths_RequiredPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// prefix is a common prefix for the paths within the required_paths
	// list.
	Prefix *gnmi.Path `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// paths is the set of paths that are to be checked for.
	Paths []*gnmi.Path `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *DataTreePaths_RequiredPaths) Reset() {
	*x = DataTreePaths_RequiredPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTreePaths_RequiredPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTreePaths_RequiredPaths) ProtoMessage() {}

func (x *DataTreePaths_RequiredPaths) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTreePaths_RequiredPaths.ProtoReflect.Descriptor instead.
func (*DataTreePaths_RequiredPaths) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{8, 3}
}

func (x *DataTreePaths_RequiredPaths) GetPrefix() *gnmi.Path {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *DataTreePaths_RequiredPaths) GetPaths() []*gnmi.Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

// RequiredValues specifies an operation that checks values within
// the data tree.
type DataTreePaths_RequiredValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// prefix is a common prefix for the paths within the required_values
	// list.
	Prefix *gnmi.Path `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// matches specifies a set of path to value criteria that must be met.
	// Each match is considered in isolation to evalute to true or false.
	// The test fails if any of the matches evaluate to false.
	Matches []*PathValueMatch `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *DataTreePaths_RequiredValues) Reset() {
	*x = DataTreePaths_RequiredValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tests_tests_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTreePaths_RequiredValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTreePaths_RequiredValues) ProtoMessage() {}

func (x *DataTreePaths_RequiredValues) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tests_tests_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTreePaths_RequiredValues.ProtoReflect.Descriptor instead.
func (*DataTreePaths_RequiredValues) Descriptor() ([]byte, []int) {
	return file_proto_tests_tests_proto_rawDescGZIP(), []int{8, 4}
}

func (x *DataTreePaths_RequiredValues) GetPrefix() *gnmi.Path {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *DataTreePaths_RequiredValues) GetMatches() []*PathValueMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

var File_proto_tests_tests_proto protoreflect.FileDescriptor

var file_proto_tests_tests_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x1a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x09, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xc0, 0x04,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x61, 0x6b, 0x65,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x61, 0x6b, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x48, 0x61, 0x73,
	0x4b, 0x65, 0x79, 0x73, 0x48, 0x00, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x4c, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x61, 0x74, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3e, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3b, 0x0a,
	0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x67, 0x6e,
	0x6d, 0x69, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x47, 0x4e, 0x4d, 0x49, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x12, 0x67, 0x6e, 0x6d, 0x69, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0xa9, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x31, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x66, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x46, 0x61, 0x6b, 0x65, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x6b, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x8e, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x1e, 0x0a, 0x08, 0x46, 0x61, 0x6b, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73,
	0x22, 0xc2, 0x01, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x6e, 0x6d,
	0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0x6e, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x36, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x79, 0x0a, 0x12, 0x47, 0x4e, 0x4d, 0x49, 0x50, 0x61, 0x74,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x22, 0x80, 0x07, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x72, 0x65, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x1a,
	0xad, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x4b,
	0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xac, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x34, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72,
	0x65, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x94,
	0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x55, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x6e, 0x6d, 0x69,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x65, 0x0a, 0x0e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a,
	0x06, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x73, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x71,
	0x75, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6d, 0x69,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e,
	0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x03, 0x61, 0x6e, 0x64,
	0x12, 0x25, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x02, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x22, 0x58, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x61, 0x74,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x6e, 0x6d, 0x69,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x6e,
	0x6d, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x5c, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x6f,
	0x70, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x73, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x22, 0xfa, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6d,
	0x69, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03,
	0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x73, 0x65, 0x74, 0x4f,
	0x6b, 0x12, 0x24, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x01, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x67, 0x65, 0x74, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x6b,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05,
	0x67, 0x65, 0x74, 0x4f, 0x6b, 0x12, 0x36, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6e,
	0x6d, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x02,
	0x52, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tests_tests_proto_rawDescOnce sync.Once
	file_proto_tests_tests_proto_rawDescData = file_proto_tests_tests_proto_rawDesc
)

func file_proto_tests_tests_proto_rawDescGZIP() []byte {
	file_proto_tests_tests_proto_rawDescOnce.Do(func() {
		file_proto_tests_tests_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tests_tests_proto_rawDescData)
	})
	return file_proto_tests_tests_proto_rawDescData
}

var file_proto_tests_tests_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_tests_tests_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_tests_tests_proto_goTypes = []interface{}{
	(GetSetValidationOper_OperResult)(0), // 0: tests.GetSetValidationOper.OperResult
	(*Default)(nil),                      // 1: tests.Default
	(*SubscribeTest)(nil),                // 2: tests.SubscribeTest
	(*Test)(nil),                         // 3: tests.Test
	(*Credentials)(nil),                  // 4: tests.Credentials
	(*Connection)(nil),                   // 5: tests.Connection
	(*FakeTest)(nil),                     // 6: tests.FakeTest
	(*HasKeys)(nil),                      // 7: tests.HasKeys
	(*GNMIPathCompliance)(nil),           // 8: tests.GNMIPathCompliance
	(*DataTreePaths)(nil),                // 9: tests.DataTreePaths
	(*PathValueMatch)(nil),               // 10: tests.PathValueMatch
	(*SchemaPathComplete)(nil),           // 11: tests.SchemaPathComplete
	(*GetSetTest)(nil),                   // 12: tests.GetSetTest
	(*GetSetValidationTest)(nil),         // 13: tests.GetSetValidationTest
	(*GetSetValidationOper)(nil),         // 14: tests.GetSetValidationOper
	(*HasKeys_Item)(nil),                 // 15: tests.HasKeys.Item
	nil,                                  // 16: tests.HasKeys.Item.KeyEntry
	(*DataTreePaths_QueryStep)(nil),      // 17: tests.DataTreePaths.QueryStep
	(*DataTreePaths_TestQuery)(nil),      // 18: tests.DataTreePaths.TestQuery
	(*DataTreePaths_ListQuery)(nil),      // 19: tests.DataTreePaths.ListQuery
	(*DataTreePaths_RequiredPaths)(nil),  // 20: tests.DataTreePaths.RequiredPaths
	(*DataTreePaths_RequiredValues)(nil), // 21: tests.DataTreePaths.RequiredValues
	nil,                                  // 22: tests.DataTreePaths.QueryStep.KeyEntry
	(*gnmi.SubscribeRequest)(nil),        // 23: gnmi.SubscribeRequest
	(*gnmi.Path)(nil),                    // 24: gnmi.Path
	(*gnmi.TypedValue)(nil),              // 25: gnmi.TypedValue
	(*gnmi.SetRequest)(nil),              // 26: gnmi.SetRequest
	(*gnmi.GetRequest)(nil),              // 27: gnmi.GetRequest
	(*gnmi.GetResponse)(nil),             // 28: gnmi.GetResponse
}
var file_proto_tests_tests_proto_depIdxs = []int32{
	23, // 0: tests.SubscribeTest.request:type_name -> gnmi.SubscribeRequest
	1,  // 1: tests.SubscribeTest.path_validation:type_name -> tests.Default
	7,  // 2: tests.SubscribeTest.has_keys:type_name -> tests.HasKeys
	11, // 3: tests.SubscribeTest.schemapath_complete:type_name -> tests.SchemaPathComplete
	9,  // 4: tests.SubscribeTest.data_tree_paths:type_name -> tests.DataTreePaths
	1,  // 5: tests.SubscribeTest.value_validation:type_name -> tests.Default
	8,  // 6: tests.SubscribeTest.gnmipath_compliance:type_name -> tests.GNMIPathCompliance
	5,  // 7: tests.Test.connection:type_name -> tests.Connection
	2,  // 8: tests.Test.subscribe:type_name -> tests.SubscribeTest
	12, // 9: tests.Test.get_set:type_name -> tests.GetSetTest
	6,  // 10: tests.Test.fake_test:type_name -> tests.FakeTest
	4,  // 11: tests.Connection.credentials:type_name -> tests.Credentials
	24, // 12: tests.HasKeys.path:type_name -> gnmi.Path
	15, // 13: tests.HasKeys.item:type_name -> tests.HasKeys.Item
	18, // 14: tests.DataTreePaths.test_oper:type_name -> tests.DataTreePaths.TestQuery
	24, // 15: tests.PathValueMatch.path:type_name -> gnmi.Path
	25, // 16: tests.PathValueMatch.equal:type_name -> gnmi.TypedValue
	25, // 17: tests.PathValueMatch.not_equal:type_name -> gnmi.TypedValue
	10, // 18: tests.PathValueMatch.and:type_name -> tests.PathValueMatch
	10, // 19: tests.PathValueMatch.or:type_name -> tests.PathValueMatch
	24, // 20: tests.SchemaPathComplete.prefix:type_name -> gnmi.Path
	24, // 21: tests.SchemaPathComplete.path:type_name -> gnmi.Path
	13, // 22: tests.GetSetTest.oper_validation:type_name -> tests.GetSetValidationTest
	14, // 23: tests.GetSetValidationTest.initialise_oper:type_name -> tests.GetSetValidationOper
	14, // 24: tests.GetSetValidationTest.test_oper:type_name -> tests.GetSetValidationOper
	26, // 25: tests.GetSetValidationOper.set:type_name -> gnmi.SetRequest
	0,  // 26: tests.GetSetValidationOper.set_ok:type_name -> tests.GetSetValidationOper.OperResult
	27, // 27: tests.GetSetValidationOper.get:type_name -> gnmi.GetRequest
	0,  // 28: tests.GetSetValidationOper.get_ok:type_name -> tests.GetSetValidationOper.OperResult
	28, // 29: tests.GetSetValidationOper.get_response:type_name -> gnmi.GetResponse
	16, // 30: tests.HasKeys.Item.key:type_name -> tests.HasKeys.Item.KeyEntry
	22, // 31: tests.DataTreePaths.QueryStep.key:type_name -> tests.DataTreePaths.QueryStep.KeyEntry
	17, // 32: tests.DataTreePaths.TestQuery.steps:type_name -> tests.DataTreePaths.QueryStep
	19, // 33: tests.DataTreePaths.TestQuery.get_list_keys:type_name -> tests.DataTreePaths.ListQuery
	20, // 34: tests.DataTreePaths.TestQuery.required_paths:type_name -> tests.DataTreePaths.RequiredPaths
	21, // 35: tests.DataTreePaths.TestQuery.required_values:type_name -> tests.DataTreePaths.RequiredValues
	18, // 36: tests.DataTreePaths.ListQuery.next_query:type_name -> tests.DataTreePaths.TestQuery
	10, // 37: tests.DataTreePaths.ListQuery.filter:type_name -> tests.PathValueMatch
	24, // 38: tests.DataTreePaths.RequiredPaths.prefix:type_name -> gnmi.Path
	24, // 39: tests.DataTreePaths.RequiredPaths.paths:type_name -> gnmi.Path
	24, // 40: tests.DataTreePaths.RequiredValues.prefix:type_name -> gnmi.Path
	10, // 41: tests.DataTreePaths.RequiredValues.matches:type_name -> tests.PathValueMatch
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_proto_tests_tests_proto_init() }
func file_proto_tests_tests_proto_init() {
	if File_proto_tests_tests_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_tests_tests_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Default); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FakeTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GNMIPathCompliance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTreePaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathValueMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaPathComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSetTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSetValidationTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSetValidationOper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasKeys_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTreePaths_QueryStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTreePaths_TestQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTreePaths_ListQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTreePaths_RequiredPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tests_tests_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTreePaths_RequiredValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_tests_tests_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SubscribeTest_FakeTest)(nil),
		(*SubscribeTest_PathValidation)(nil),
		(*SubscribeTest_HasKeys)(nil),
		(*SubscribeTest_SchemapathComplete)(nil),
		(*SubscribeTest_DataTreePaths)(nil),
		(*SubscribeTest_ValueValidation)(nil),
		(*SubscribeTest_GnmipathCompliance)(nil),
	}
	file_proto_tests_tests_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Test_Subscribe)(nil),
		(*Test_GetSet)(nil),
		(*Test_FakeTest)(nil),
	}
	file_proto_tests_tests_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*PathValueMatch_Equal)(nil),
		(*PathValueMatch_IsUnset)(nil),
		(*PathValueMatch_IsSet)(nil),
		(*PathValueMatch_NotEqual)(nil),
	}
	file_proto_tests_tests_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*GetSetTest_OperValidation)(nil),
	}
	file_proto_tests_tests_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*GetSetValidationOper_Set)(nil),
		(*GetSetValidationOper_CommonSetrequest)(nil),
		(*GetSetValidationOper_Get)(nil),
		(*GetSetValidationOper_CommonGetrequest)(nil),
		(*GetSetValidationOper_GetResponse)(nil),
		(*GetSetValidationOper_CommonGetresponse)(nil),
	}
	file_proto_tests_tests_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*DataTreePaths_TestQuery_GetListKeys)(nil),
		(*DataTreePaths_TestQuery_RequiredPaths)(nil),
		(*DataTreePaths_TestQuery_RequiredValues)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tests_tests_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tests_tests_proto_goTypes,
		DependencyIndexes: file_proto_tests_tests_proto_depIdxs,
		EnumInfos:         file_proto_tests_tests_proto_enumTypes,
		MessageInfos:      file_proto_tests_tests_proto_msgTypes,
	}.Build()
	File_proto_tests_tests_proto = out.File
	file_proto_tests_tests_proto_rawDesc = nil
	file_proto_tests_tests_proto_goTypes = nil
	file_proto_tests_tests_proto_depIdxs = nil
}
