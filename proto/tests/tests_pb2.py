# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/tests/tests.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from github.com.openconfig.gnmi.proto.gnmi import gnmi_pb2 as github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='proto/tests/tests.proto',
  package='tests',
  syntax='proto3',
  serialized_pb=_b('\n\x17proto/tests/tests.proto\x12\x05tests\x1a\x30github.com/openconfig/gnmi/proto/gnmi/gnmi.proto\"\t\n\x07\x44\x65\x66\x61ult\"\xaa\x03\n\rSubscribeTest\x12\'\n\x07request\x18\x01 \x01(\x0b\x32\x16.gnmi.SubscribeRequest\x12\x15\n\rlog_responses\x18\x02 \x01(\x08\x12\x1c\n\x14ignore_invalid_paths\x18\x03 \x01(\x08\x12\x13\n\tfake_test\x18\n \x01(\tH\x00\x12)\n\x0fpath_validation\x18\x0b \x01(\x0b\x32\x0e.tests.DefaultH\x00\x12\"\n\x08has_keys\x18\x0c \x01(\x0b\x32\x0e.tests.HasKeysH\x00\x12\x38\n\x13schemapath_complete\x18\r \x01(\x0b\x32\x19.tests.SchemaPathCompleteH\x00\x12/\n\x0f\x64\x61ta_tree_paths\x18\x0e \x01(\x0b\x32\x14.tests.DataTreePathsH\x00\x12*\n\x10value_validation\x18\x0f \x01(\x0b\x32\x0e.tests.DefaultH\x00\x12\x38\n\x13gnmipath_compliance\x18\x10 \x01(\x0b\x32\x19.tests.GNMIPathComplianceH\x00\x42\x06\n\x04\x61rgs\"\xe2\x01\n\x04Test\x12\x13\n\x0b\x64\x65scription\x18\x01 \x01(\t\x12\x0f\n\x07timeout\x18\x02 \x01(\x05\x12\x0e\n\x06schema\x18\x03 \x01(\t\x12%\n\nconnection\x18\x04 \x01(\x0b\x32\x11.tests.Connection\x12)\n\tsubscribe\x18\n \x01(\x0b\x32\x14.tests.SubscribeTestH\x00\x12$\n\x07get_set\x18\x0b \x01(\x0b\x32\x11.tests.GetSetTestH\x00\x12$\n\tfake_test\x18\x0c \x01(\x0b\x32\x0f.tests.FakeTestH\x00\x42\x06\n\x04type\"C\n\x0b\x43redentials\x12\x10\n\x08resolver\x18\x01 \x01(\t\x12\x10\n\x08username\x18\x02 \x01(\t\x12\x10\n\x08password\x18\x03 \x01(\t\"g\n\nConnection\x12\x0e\n\x06target\x18\x01 \x01(\t\x12\x0f\n\x07\x61\x64\x64ress\x18\x02 \x01(\t\x12\'\n\x0b\x63redentials\x18\x03 \x01(\x0b\x32\x12.tests.Credentials\x12\x0f\n\x07timeout\x18\x04 \x01(\x05\"\x18\n\x08\x46\x61keTest\x12\x0c\n\x04pass\x18\x01 \x01(\x08\"\xa5\x01\n\x07HasKeys\x12\x18\n\x04path\x18\x01 \x01(\x0b\x32\n.gnmi.Path\x12!\n\x04item\x18\x02 \x03(\x0b\x32\x13.tests.HasKeys.Item\x1a]\n\x04Item\x12)\n\x03key\x18\x01 \x03(\x0b\x32\x1c.tests.HasKeys.Item.KeyEntry\x1a*\n\x08KeyEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"T\n\x12GNMIPathCompliance\x12\x12\n\ncheck_elem\x18\x01 \x01(\x08\x12\x14\n\x0c\x63heck_target\x18\x02 \x01(\t\x12\x14\n\x0c\x63heck_origin\x18\x03 \x01(\t\"\xe6\x05\n\rDataTreePaths\x12\x31\n\ttest_oper\x18\x01 \x01(\x0b\x32\x1e.tests.DataTreePaths.TestQuery\x1a\x8d\x01\n\tQueryStep\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x34\n\x03key\x18\x02 \x03(\x0b\x32\'.tests.DataTreePaths.QueryStep.KeyEntry\x12\x10\n\x08key_name\x18\x03 \x01(\t\x1a*\n\x08KeyEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a\xf9\x01\n\tTestQuery\x12-\n\x05steps\x18\x01 \x03(\x0b\x32\x1e.tests.DataTreePaths.QueryStep\x12\x37\n\rget_list_keys\x18\x02 \x01(\x0b\x32\x1e.tests.DataTreePaths.ListQueryH\x00\x12<\n\x0erequired_paths\x18\x03 \x01(\x0b\x32\".tests.DataTreePaths.RequiredPathsH\x00\x12>\n\x0frequired_values\x18\x04 \x01(\x0b\x32#.tests.DataTreePaths.RequiredValuesH\x00\x42\x06\n\x04type\x1ax\n\tListQuery\x12\x10\n\x08var_name\x18\x01 \x01(\t\x12\x32\n\nnext_query\x18\x02 \x01(\x0b\x32\x1e.tests.DataTreePaths.TestQuery\x12%\n\x06\x66ilter\x18\x03 \x01(\x0b\x32\x15.tests.PathValueMatch\x1a\x46\n\rRequiredPaths\x12\x1a\n\x06prefix\x18\x01 \x01(\x0b\x32\n.gnmi.Path\x12\x19\n\x05paths\x18\x02 \x03(\x0b\x32\n.gnmi.Path\x1aT\n\x0eRequiredValues\x12\x1a\n\x06prefix\x18\x01 \x01(\x0b\x32\n.gnmi.Path\x12&\n\x07matches\x18\x02 \x03(\x0b\x32\x15.tests.PathValueMatch\"\xed\x01\n\x0ePathValueMatch\x12\x18\n\x04path\x18\x01 \x01(\x0b\x32\n.gnmi.Path\x12!\n\x05\x65qual\x18\x02 \x01(\x0b\x32\x10.gnmi.TypedValueH\x00\x12\x12\n\x08is_unset\x18\x03 \x01(\x08H\x00\x12\x10\n\x06is_set\x18\x04 \x01(\x08H\x00\x12%\n\tnot_equal\x18\x05 \x01(\x0b\x32\x10.gnmi.TypedValueH\x00\x12\"\n\x03\x61nd\x18\x14 \x03(\x0b\x32\x15.tests.PathValueMatch\x12!\n\x02or\x18\x15 \x03(\x0b\x32\x15.tests.PathValueMatchB\n\n\x08\x63riteria\"J\n\x12SchemaPathComplete\x12\x1a\n\x06prefix\x18\x02 \x01(\x0b\x32\n.gnmi.Path\x12\x18\n\x04path\x18\x01 \x03(\x0b\x32\n.gnmi.Path\"L\n\nGetSetTest\x12\x36\n\x0foper_validation\x18\n \x01(\x0b\x32\x1b.tests.GetSetValidationTestH\x00\x42\x06\n\x04\x61rgs\"|\n\x14GetSetValidationTest\x12\x34\n\x0finitialise_oper\x18\x01 \x01(\x0b\x32\x1b.tests.GetSetValidationOper\x12.\n\ttest_oper\x18\x02 \x01(\x0b\x32\x1b.tests.GetSetValidationOper\"\x9e\x03\n\x14GetSetValidationOper\x12\x1f\n\x03set\x18\x01 \x01(\x0b\x32\x10.gnmi.SetRequestH\x00\x12\x1b\n\x11\x63ommon_setrequest\x18\x02 \x01(\tH\x00\x12\x36\n\x06set_ok\x18\n \x01(\x0e\x32&.tests.GetSetValidationOper.OperResult\x12\x1f\n\x03get\x18\x0b \x01(\x0b\x32\x10.gnmi.GetRequestH\x01\x12\x1b\n\x11\x63ommon_getrequest\x18\x0c \x01(\tH\x01\x12\x36\n\x06get_ok\x18\x14 \x01(\x0e\x32&.tests.GetSetValidationOper.OperResult\x12)\n\x0cget_response\x18\x15 \x01(\x0b\x32\x11.gnmi.GetResponseH\x02\x12\x1c\n\x12\x63ommon_getresponse\x18\x16 \x01(\tH\x02\"&\n\nOperResult\x12\x0c\n\x08NO_ERROR\x10\x00\x12\n\n\x06\x46\x41ILED\x10\x01\x42\x0c\n\nsetrequestB\x0c\n\ngetrequestB\r\n\x0bgetresponseb\x06proto3')
  ,
  dependencies=[github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2.DESCRIPTOR,])



_GETSETVALIDATIONOPER_OPERRESULT = _descriptor.EnumDescriptor(
  name='OperResult',
  full_name='tests.GetSetValidationOper.OperResult',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NO_ERROR', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FAILED', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2806,
  serialized_end=2844,
)
_sym_db.RegisterEnumDescriptor(_GETSETVALIDATIONOPER_OPERRESULT)


_DEFAULT = _descriptor.Descriptor(
  name='Default',
  full_name='tests.Default',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=84,
  serialized_end=93,
)


_SUBSCRIBETEST = _descriptor.Descriptor(
  name='SubscribeTest',
  full_name='tests.SubscribeTest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request', full_name='tests.SubscribeTest.request', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='log_responses', full_name='tests.SubscribeTest.log_responses', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ignore_invalid_paths', full_name='tests.SubscribeTest.ignore_invalid_paths', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='fake_test', full_name='tests.SubscribeTest.fake_test', index=3,
      number=10, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='path_validation', full_name='tests.SubscribeTest.path_validation', index=4,
      number=11, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='has_keys', full_name='tests.SubscribeTest.has_keys', index=5,
      number=12, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='schemapath_complete', full_name='tests.SubscribeTest.schemapath_complete', index=6,
      number=13, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='data_tree_paths', full_name='tests.SubscribeTest.data_tree_paths', index=7,
      number=14, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='value_validation', full_name='tests.SubscribeTest.value_validation', index=8,
      number=15, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='gnmipath_compliance', full_name='tests.SubscribeTest.gnmipath_compliance', index=9,
      number=16, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='args', full_name='tests.SubscribeTest.args',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=96,
  serialized_end=522,
)


_TEST = _descriptor.Descriptor(
  name='Test',
  full_name='tests.Test',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='description', full_name='tests.Test.description', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='timeout', full_name='tests.Test.timeout', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='schema', full_name='tests.Test.schema', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='connection', full_name='tests.Test.connection', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='subscribe', full_name='tests.Test.subscribe', index=4,
      number=10, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='get_set', full_name='tests.Test.get_set', index=5,
      number=11, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='fake_test', full_name='tests.Test.fake_test', index=6,
      number=12, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='type', full_name='tests.Test.type',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=525,
  serialized_end=751,
)


_CREDENTIALS = _descriptor.Descriptor(
  name='Credentials',
  full_name='tests.Credentials',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='resolver', full_name='tests.Credentials.resolver', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='username', full_name='tests.Credentials.username', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='password', full_name='tests.Credentials.password', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=753,
  serialized_end=820,
)


_CONNECTION = _descriptor.Descriptor(
  name='Connection',
  full_name='tests.Connection',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='target', full_name='tests.Connection.target', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='address', full_name='tests.Connection.address', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='credentials', full_name='tests.Connection.credentials', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='timeout', full_name='tests.Connection.timeout', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=822,
  serialized_end=925,
)


_FAKETEST = _descriptor.Descriptor(
  name='FakeTest',
  full_name='tests.FakeTest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pass', full_name='tests.FakeTest.pass', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=927,
  serialized_end=951,
)


_HASKEYS_ITEM_KEYENTRY = _descriptor.Descriptor(
  name='KeyEntry',
  full_name='tests.HasKeys.Item.KeyEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='tests.HasKeys.Item.KeyEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='value', full_name='tests.HasKeys.Item.KeyEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1077,
  serialized_end=1119,
)

_HASKEYS_ITEM = _descriptor.Descriptor(
  name='Item',
  full_name='tests.HasKeys.Item',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='tests.HasKeys.Item.key', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_HASKEYS_ITEM_KEYENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1026,
  serialized_end=1119,
)

_HASKEYS = _descriptor.Descriptor(
  name='HasKeys',
  full_name='tests.HasKeys',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='tests.HasKeys.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='item', full_name='tests.HasKeys.item', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_HASKEYS_ITEM, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=954,
  serialized_end=1119,
)


_GNMIPATHCOMPLIANCE = _descriptor.Descriptor(
  name='GNMIPathCompliance',
  full_name='tests.GNMIPathCompliance',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='check_elem', full_name='tests.GNMIPathCompliance.check_elem', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='check_target', full_name='tests.GNMIPathCompliance.check_target', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='check_origin', full_name='tests.GNMIPathCompliance.check_origin', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1121,
  serialized_end=1205,
)


_DATATREEPATHS_QUERYSTEP_KEYENTRY = _descriptor.Descriptor(
  name='KeyEntry',
  full_name='tests.DataTreePaths.QueryStep.KeyEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='tests.DataTreePaths.QueryStep.KeyEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='value', full_name='tests.DataTreePaths.QueryStep.KeyEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1077,
  serialized_end=1119,
)

_DATATREEPATHS_QUERYSTEP = _descriptor.Descriptor(
  name='QueryStep',
  full_name='tests.DataTreePaths.QueryStep',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='tests.DataTreePaths.QueryStep.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='key', full_name='tests.DataTreePaths.QueryStep.key', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='key_name', full_name='tests.DataTreePaths.QueryStep.key_name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_DATATREEPATHS_QUERYSTEP_KEYENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1277,
  serialized_end=1418,
)

_DATATREEPATHS_TESTQUERY = _descriptor.Descriptor(
  name='TestQuery',
  full_name='tests.DataTreePaths.TestQuery',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='steps', full_name='tests.DataTreePaths.TestQuery.steps', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='get_list_keys', full_name='tests.DataTreePaths.TestQuery.get_list_keys', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='required_paths', full_name='tests.DataTreePaths.TestQuery.required_paths', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='required_values', full_name='tests.DataTreePaths.TestQuery.required_values', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='type', full_name='tests.DataTreePaths.TestQuery.type',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1421,
  serialized_end=1670,
)

_DATATREEPATHS_LISTQUERY = _descriptor.Descriptor(
  name='ListQuery',
  full_name='tests.DataTreePaths.ListQuery',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='var_name', full_name='tests.DataTreePaths.ListQuery.var_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='next_query', full_name='tests.DataTreePaths.ListQuery.next_query', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='filter', full_name='tests.DataTreePaths.ListQuery.filter', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1672,
  serialized_end=1792,
)

_DATATREEPATHS_REQUIREDPATHS = _descriptor.Descriptor(
  name='RequiredPaths',
  full_name='tests.DataTreePaths.RequiredPaths',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='prefix', full_name='tests.DataTreePaths.RequiredPaths.prefix', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='paths', full_name='tests.DataTreePaths.RequiredPaths.paths', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1794,
  serialized_end=1864,
)

_DATATREEPATHS_REQUIREDVALUES = _descriptor.Descriptor(
  name='RequiredValues',
  full_name='tests.DataTreePaths.RequiredValues',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='prefix', full_name='tests.DataTreePaths.RequiredValues.prefix', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='matches', full_name='tests.DataTreePaths.RequiredValues.matches', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1866,
  serialized_end=1950,
)

_DATATREEPATHS = _descriptor.Descriptor(
  name='DataTreePaths',
  full_name='tests.DataTreePaths',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='test_oper', full_name='tests.DataTreePaths.test_oper', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_DATATREEPATHS_QUERYSTEP, _DATATREEPATHS_TESTQUERY, _DATATREEPATHS_LISTQUERY, _DATATREEPATHS_REQUIREDPATHS, _DATATREEPATHS_REQUIREDVALUES, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1208,
  serialized_end=1950,
)


_PATHVALUEMATCH = _descriptor.Descriptor(
  name='PathValueMatch',
  full_name='tests.PathValueMatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='tests.PathValueMatch.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='equal', full_name='tests.PathValueMatch.equal', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_unset', full_name='tests.PathValueMatch.is_unset', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_set', full_name='tests.PathValueMatch.is_set', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='not_equal', full_name='tests.PathValueMatch.not_equal', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='and', full_name='tests.PathValueMatch.and', index=5,
      number=20, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='or', full_name='tests.PathValueMatch.or', index=6,
      number=21, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='criteria', full_name='tests.PathValueMatch.criteria',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1953,
  serialized_end=2190,
)


_SCHEMAPATHCOMPLETE = _descriptor.Descriptor(
  name='SchemaPathComplete',
  full_name='tests.SchemaPathComplete',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='prefix', full_name='tests.SchemaPathComplete.prefix', index=0,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='path', full_name='tests.SchemaPathComplete.path', index=1,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2192,
  serialized_end=2266,
)


_GETSETTEST = _descriptor.Descriptor(
  name='GetSetTest',
  full_name='tests.GetSetTest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='oper_validation', full_name='tests.GetSetTest.oper_validation', index=0,
      number=10, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='args', full_name='tests.GetSetTest.args',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=2268,
  serialized_end=2344,
)


_GETSETVALIDATIONTEST = _descriptor.Descriptor(
  name='GetSetValidationTest',
  full_name='tests.GetSetValidationTest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='initialise_oper', full_name='tests.GetSetValidationTest.initialise_oper', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='test_oper', full_name='tests.GetSetValidationTest.test_oper', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2346,
  serialized_end=2470,
)


_GETSETVALIDATIONOPER = _descriptor.Descriptor(
  name='GetSetValidationOper',
  full_name='tests.GetSetValidationOper',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='set', full_name='tests.GetSetValidationOper.set', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='common_setrequest', full_name='tests.GetSetValidationOper.common_setrequest', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='set_ok', full_name='tests.GetSetValidationOper.set_ok', index=2,
      number=10, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='get', full_name='tests.GetSetValidationOper.get', index=3,
      number=11, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='common_getrequest', full_name='tests.GetSetValidationOper.common_getrequest', index=4,
      number=12, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='get_ok', full_name='tests.GetSetValidationOper.get_ok', index=5,
      number=20, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='get_response', full_name='tests.GetSetValidationOper.get_response', index=6,
      number=21, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='common_getresponse', full_name='tests.GetSetValidationOper.common_getresponse', index=7,
      number=22, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _GETSETVALIDATIONOPER_OPERRESULT,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='setrequest', full_name='tests.GetSetValidationOper.setrequest',
      index=0, containing_type=None, fields=[]),
    _descriptor.OneofDescriptor(
      name='getrequest', full_name='tests.GetSetValidationOper.getrequest',
      index=1, containing_type=None, fields=[]),
    _descriptor.OneofDescriptor(
      name='getresponse', full_name='tests.GetSetValidationOper.getresponse',
      index=2, containing_type=None, fields=[]),
  ],
  serialized_start=2473,
  serialized_end=2887,
)

_SUBSCRIBETEST.fields_by_name['request'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._SUBSCRIBEREQUEST
_SUBSCRIBETEST.fields_by_name['path_validation'].message_type = _DEFAULT
_SUBSCRIBETEST.fields_by_name['has_keys'].message_type = _HASKEYS
_SUBSCRIBETEST.fields_by_name['schemapath_complete'].message_type = _SCHEMAPATHCOMPLETE
_SUBSCRIBETEST.fields_by_name['data_tree_paths'].message_type = _DATATREEPATHS
_SUBSCRIBETEST.fields_by_name['value_validation'].message_type = _DEFAULT
_SUBSCRIBETEST.fields_by_name['gnmipath_compliance'].message_type = _GNMIPATHCOMPLIANCE
_SUBSCRIBETEST.oneofs_by_name['args'].fields.append(
  _SUBSCRIBETEST.fields_by_name['fake_test'])
_SUBSCRIBETEST.fields_by_name['fake_test'].containing_oneof = _SUBSCRIBETEST.oneofs_by_name['args']
_SUBSCRIBETEST.oneofs_by_name['args'].fields.append(
  _SUBSCRIBETEST.fields_by_name['path_validation'])
_SUBSCRIBETEST.fields_by_name['path_validation'].containing_oneof = _SUBSCRIBETEST.oneofs_by_name['args']
_SUBSCRIBETEST.oneofs_by_name['args'].fields.append(
  _SUBSCRIBETEST.fields_by_name['has_keys'])
_SUBSCRIBETEST.fields_by_name['has_keys'].containing_oneof = _SUBSCRIBETEST.oneofs_by_name['args']
_SUBSCRIBETEST.oneofs_by_name['args'].fields.append(
  _SUBSCRIBETEST.fields_by_name['schemapath_complete'])
_SUBSCRIBETEST.fields_by_name['schemapath_complete'].containing_oneof = _SUBSCRIBETEST.oneofs_by_name['args']
_SUBSCRIBETEST.oneofs_by_name['args'].fields.append(
  _SUBSCRIBETEST.fields_by_name['data_tree_paths'])
_SUBSCRIBETEST.fields_by_name['data_tree_paths'].containing_oneof = _SUBSCRIBETEST.oneofs_by_name['args']
_SUBSCRIBETEST.oneofs_by_name['args'].fields.append(
  _SUBSCRIBETEST.fields_by_name['value_validation'])
_SUBSCRIBETEST.fields_by_name['value_validation'].containing_oneof = _SUBSCRIBETEST.oneofs_by_name['args']
_SUBSCRIBETEST.oneofs_by_name['args'].fields.append(
  _SUBSCRIBETEST.fields_by_name['gnmipath_compliance'])
_SUBSCRIBETEST.fields_by_name['gnmipath_compliance'].containing_oneof = _SUBSCRIBETEST.oneofs_by_name['args']
_TEST.fields_by_name['connection'].message_type = _CONNECTION
_TEST.fields_by_name['subscribe'].message_type = _SUBSCRIBETEST
_TEST.fields_by_name['get_set'].message_type = _GETSETTEST
_TEST.fields_by_name['fake_test'].message_type = _FAKETEST
_TEST.oneofs_by_name['type'].fields.append(
  _TEST.fields_by_name['subscribe'])
_TEST.fields_by_name['subscribe'].containing_oneof = _TEST.oneofs_by_name['type']
_TEST.oneofs_by_name['type'].fields.append(
  _TEST.fields_by_name['get_set'])
_TEST.fields_by_name['get_set'].containing_oneof = _TEST.oneofs_by_name['type']
_TEST.oneofs_by_name['type'].fields.append(
  _TEST.fields_by_name['fake_test'])
_TEST.fields_by_name['fake_test'].containing_oneof = _TEST.oneofs_by_name['type']
_CONNECTION.fields_by_name['credentials'].message_type = _CREDENTIALS
_HASKEYS_ITEM_KEYENTRY.containing_type = _HASKEYS_ITEM
_HASKEYS_ITEM.fields_by_name['key'].message_type = _HASKEYS_ITEM_KEYENTRY
_HASKEYS_ITEM.containing_type = _HASKEYS
_HASKEYS.fields_by_name['path'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._PATH
_HASKEYS.fields_by_name['item'].message_type = _HASKEYS_ITEM
_DATATREEPATHS_QUERYSTEP_KEYENTRY.containing_type = _DATATREEPATHS_QUERYSTEP
_DATATREEPATHS_QUERYSTEP.fields_by_name['key'].message_type = _DATATREEPATHS_QUERYSTEP_KEYENTRY
_DATATREEPATHS_QUERYSTEP.containing_type = _DATATREEPATHS
_DATATREEPATHS_TESTQUERY.fields_by_name['steps'].message_type = _DATATREEPATHS_QUERYSTEP
_DATATREEPATHS_TESTQUERY.fields_by_name['get_list_keys'].message_type = _DATATREEPATHS_LISTQUERY
_DATATREEPATHS_TESTQUERY.fields_by_name['required_paths'].message_type = _DATATREEPATHS_REQUIREDPATHS
_DATATREEPATHS_TESTQUERY.fields_by_name['required_values'].message_type = _DATATREEPATHS_REQUIREDVALUES
_DATATREEPATHS_TESTQUERY.containing_type = _DATATREEPATHS
_DATATREEPATHS_TESTQUERY.oneofs_by_name['type'].fields.append(
  _DATATREEPATHS_TESTQUERY.fields_by_name['get_list_keys'])
_DATATREEPATHS_TESTQUERY.fields_by_name['get_list_keys'].containing_oneof = _DATATREEPATHS_TESTQUERY.oneofs_by_name['type']
_DATATREEPATHS_TESTQUERY.oneofs_by_name['type'].fields.append(
  _DATATREEPATHS_TESTQUERY.fields_by_name['required_paths'])
_DATATREEPATHS_TESTQUERY.fields_by_name['required_paths'].containing_oneof = _DATATREEPATHS_TESTQUERY.oneofs_by_name['type']
_DATATREEPATHS_TESTQUERY.oneofs_by_name['type'].fields.append(
  _DATATREEPATHS_TESTQUERY.fields_by_name['required_values'])
_DATATREEPATHS_TESTQUERY.fields_by_name['required_values'].containing_oneof = _DATATREEPATHS_TESTQUERY.oneofs_by_name['type']
_DATATREEPATHS_LISTQUERY.fields_by_name['next_query'].message_type = _DATATREEPATHS_TESTQUERY
_DATATREEPATHS_LISTQUERY.fields_by_name['filter'].message_type = _PATHVALUEMATCH
_DATATREEPATHS_LISTQUERY.containing_type = _DATATREEPATHS
_DATATREEPATHS_REQUIREDPATHS.fields_by_name['prefix'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._PATH
_DATATREEPATHS_REQUIREDPATHS.fields_by_name['paths'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._PATH
_DATATREEPATHS_REQUIREDPATHS.containing_type = _DATATREEPATHS
_DATATREEPATHS_REQUIREDVALUES.fields_by_name['prefix'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._PATH
_DATATREEPATHS_REQUIREDVALUES.fields_by_name['matches'].message_type = _PATHVALUEMATCH
_DATATREEPATHS_REQUIREDVALUES.containing_type = _DATATREEPATHS
_DATATREEPATHS.fields_by_name['test_oper'].message_type = _DATATREEPATHS_TESTQUERY
_PATHVALUEMATCH.fields_by_name['path'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._PATH
_PATHVALUEMATCH.fields_by_name['equal'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._TYPEDVALUE
_PATHVALUEMATCH.fields_by_name['not_equal'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._TYPEDVALUE
_PATHVALUEMATCH.fields_by_name['and'].message_type = _PATHVALUEMATCH
_PATHVALUEMATCH.fields_by_name['or'].message_type = _PATHVALUEMATCH
_PATHVALUEMATCH.oneofs_by_name['criteria'].fields.append(
  _PATHVALUEMATCH.fields_by_name['equal'])
_PATHVALUEMATCH.fields_by_name['equal'].containing_oneof = _PATHVALUEMATCH.oneofs_by_name['criteria']
_PATHVALUEMATCH.oneofs_by_name['criteria'].fields.append(
  _PATHVALUEMATCH.fields_by_name['is_unset'])
_PATHVALUEMATCH.fields_by_name['is_unset'].containing_oneof = _PATHVALUEMATCH.oneofs_by_name['criteria']
_PATHVALUEMATCH.oneofs_by_name['criteria'].fields.append(
  _PATHVALUEMATCH.fields_by_name['is_set'])
_PATHVALUEMATCH.fields_by_name['is_set'].containing_oneof = _PATHVALUEMATCH.oneofs_by_name['criteria']
_PATHVALUEMATCH.oneofs_by_name['criteria'].fields.append(
  _PATHVALUEMATCH.fields_by_name['not_equal'])
_PATHVALUEMATCH.fields_by_name['not_equal'].containing_oneof = _PATHVALUEMATCH.oneofs_by_name['criteria']
_SCHEMAPATHCOMPLETE.fields_by_name['prefix'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._PATH
_SCHEMAPATHCOMPLETE.fields_by_name['path'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._PATH
_GETSETTEST.fields_by_name['oper_validation'].message_type = _GETSETVALIDATIONTEST
_GETSETTEST.oneofs_by_name['args'].fields.append(
  _GETSETTEST.fields_by_name['oper_validation'])
_GETSETTEST.fields_by_name['oper_validation'].containing_oneof = _GETSETTEST.oneofs_by_name['args']
_GETSETVALIDATIONTEST.fields_by_name['initialise_oper'].message_type = _GETSETVALIDATIONOPER
_GETSETVALIDATIONTEST.fields_by_name['test_oper'].message_type = _GETSETVALIDATIONOPER
_GETSETVALIDATIONOPER.fields_by_name['set'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._SETREQUEST
_GETSETVALIDATIONOPER.fields_by_name['set_ok'].enum_type = _GETSETVALIDATIONOPER_OPERRESULT
_GETSETVALIDATIONOPER.fields_by_name['get'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._GETREQUEST
_GETSETVALIDATIONOPER.fields_by_name['get_ok'].enum_type = _GETSETVALIDATIONOPER_OPERRESULT
_GETSETVALIDATIONOPER.fields_by_name['get_response'].message_type = github_dot_com_dot_openconfig_dot_gnmi_dot_proto_dot_gnmi_dot_gnmi__pb2._GETRESPONSE
_GETSETVALIDATIONOPER_OPERRESULT.containing_type = _GETSETVALIDATIONOPER
_GETSETVALIDATIONOPER.oneofs_by_name['setrequest'].fields.append(
  _GETSETVALIDATIONOPER.fields_by_name['set'])
_GETSETVALIDATIONOPER.fields_by_name['set'].containing_oneof = _GETSETVALIDATIONOPER.oneofs_by_name['setrequest']
_GETSETVALIDATIONOPER.oneofs_by_name['setrequest'].fields.append(
  _GETSETVALIDATIONOPER.fields_by_name['common_setrequest'])
_GETSETVALIDATIONOPER.fields_by_name['common_setrequest'].containing_oneof = _GETSETVALIDATIONOPER.oneofs_by_name['setrequest']
_GETSETVALIDATIONOPER.oneofs_by_name['getrequest'].fields.append(
  _GETSETVALIDATIONOPER.fields_by_name['get'])
_GETSETVALIDATIONOPER.fields_by_name['get'].containing_oneof = _GETSETVALIDATIONOPER.oneofs_by_name['getrequest']
_GETSETVALIDATIONOPER.oneofs_by_name['getrequest'].fields.append(
  _GETSETVALIDATIONOPER.fields_by_name['common_getrequest'])
_GETSETVALIDATIONOPER.fields_by_name['common_getrequest'].containing_oneof = _GETSETVALIDATIONOPER.oneofs_by_name['getrequest']
_GETSETVALIDATIONOPER.oneofs_by_name['getresponse'].fields.append(
  _GETSETVALIDATIONOPER.fields_by_name['get_response'])
_GETSETVALIDATIONOPER.fields_by_name['get_response'].containing_oneof = _GETSETVALIDATIONOPER.oneofs_by_name['getresponse']
_GETSETVALIDATIONOPER.oneofs_by_name['getresponse'].fields.append(
  _GETSETVALIDATIONOPER.fields_by_name['common_getresponse'])
_GETSETVALIDATIONOPER.fields_by_name['common_getresponse'].containing_oneof = _GETSETVALIDATIONOPER.oneofs_by_name['getresponse']
DESCRIPTOR.message_types_by_name['Default'] = _DEFAULT
DESCRIPTOR.message_types_by_name['SubscribeTest'] = _SUBSCRIBETEST
DESCRIPTOR.message_types_by_name['Test'] = _TEST
DESCRIPTOR.message_types_by_name['Credentials'] = _CREDENTIALS
DESCRIPTOR.message_types_by_name['Connection'] = _CONNECTION
DESCRIPTOR.message_types_by_name['FakeTest'] = _FAKETEST
DESCRIPTOR.message_types_by_name['HasKeys'] = _HASKEYS
DESCRIPTOR.message_types_by_name['GNMIPathCompliance'] = _GNMIPATHCOMPLIANCE
DESCRIPTOR.message_types_by_name['DataTreePaths'] = _DATATREEPATHS
DESCRIPTOR.message_types_by_name['PathValueMatch'] = _PATHVALUEMATCH
DESCRIPTOR.message_types_by_name['SchemaPathComplete'] = _SCHEMAPATHCOMPLETE
DESCRIPTOR.message_types_by_name['GetSetTest'] = _GETSETTEST
DESCRIPTOR.message_types_by_name['GetSetValidationTest'] = _GETSETVALIDATIONTEST
DESCRIPTOR.message_types_by_name['GetSetValidationOper'] = _GETSETVALIDATIONOPER
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Default = _reflection.GeneratedProtocolMessageType('Default', (_message.Message,), dict(
  DESCRIPTOR = _DEFAULT,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.Default)
  ))
_sym_db.RegisterMessage(Default)

SubscribeTest = _reflection.GeneratedProtocolMessageType('SubscribeTest', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIBETEST,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.SubscribeTest)
  ))
_sym_db.RegisterMessage(SubscribeTest)

Test = _reflection.GeneratedProtocolMessageType('Test', (_message.Message,), dict(
  DESCRIPTOR = _TEST,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.Test)
  ))
_sym_db.RegisterMessage(Test)

Credentials = _reflection.GeneratedProtocolMessageType('Credentials', (_message.Message,), dict(
  DESCRIPTOR = _CREDENTIALS,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.Credentials)
  ))
_sym_db.RegisterMessage(Credentials)

Connection = _reflection.GeneratedProtocolMessageType('Connection', (_message.Message,), dict(
  DESCRIPTOR = _CONNECTION,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.Connection)
  ))
_sym_db.RegisterMessage(Connection)

FakeTest = _reflection.GeneratedProtocolMessageType('FakeTest', (_message.Message,), dict(
  DESCRIPTOR = _FAKETEST,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.FakeTest)
  ))
_sym_db.RegisterMessage(FakeTest)

HasKeys = _reflection.GeneratedProtocolMessageType('HasKeys', (_message.Message,), dict(

  Item = _reflection.GeneratedProtocolMessageType('Item', (_message.Message,), dict(

    KeyEntry = _reflection.GeneratedProtocolMessageType('KeyEntry', (_message.Message,), dict(
      DESCRIPTOR = _HASKEYS_ITEM_KEYENTRY,
      __module__ = 'proto.tests.tests_pb2'
      # @@protoc_insertion_point(class_scope:tests.HasKeys.Item.KeyEntry)
      ))
    ,
    DESCRIPTOR = _HASKEYS_ITEM,
    __module__ = 'proto.tests.tests_pb2'
    # @@protoc_insertion_point(class_scope:tests.HasKeys.Item)
    ))
  ,
  DESCRIPTOR = _HASKEYS,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.HasKeys)
  ))
_sym_db.RegisterMessage(HasKeys)
_sym_db.RegisterMessage(HasKeys.Item)
_sym_db.RegisterMessage(HasKeys.Item.KeyEntry)

GNMIPathCompliance = _reflection.GeneratedProtocolMessageType('GNMIPathCompliance', (_message.Message,), dict(
  DESCRIPTOR = _GNMIPATHCOMPLIANCE,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.GNMIPathCompliance)
  ))
_sym_db.RegisterMessage(GNMIPathCompliance)

DataTreePaths = _reflection.GeneratedProtocolMessageType('DataTreePaths', (_message.Message,), dict(

  QueryStep = _reflection.GeneratedProtocolMessageType('QueryStep', (_message.Message,), dict(

    KeyEntry = _reflection.GeneratedProtocolMessageType('KeyEntry', (_message.Message,), dict(
      DESCRIPTOR = _DATATREEPATHS_QUERYSTEP_KEYENTRY,
      __module__ = 'proto.tests.tests_pb2'
      # @@protoc_insertion_point(class_scope:tests.DataTreePaths.QueryStep.KeyEntry)
      ))
    ,
    DESCRIPTOR = _DATATREEPATHS_QUERYSTEP,
    __module__ = 'proto.tests.tests_pb2'
    # @@protoc_insertion_point(class_scope:tests.DataTreePaths.QueryStep)
    ))
  ,

  TestQuery = _reflection.GeneratedProtocolMessageType('TestQuery', (_message.Message,), dict(
    DESCRIPTOR = _DATATREEPATHS_TESTQUERY,
    __module__ = 'proto.tests.tests_pb2'
    # @@protoc_insertion_point(class_scope:tests.DataTreePaths.TestQuery)
    ))
  ,

  ListQuery = _reflection.GeneratedProtocolMessageType('ListQuery', (_message.Message,), dict(
    DESCRIPTOR = _DATATREEPATHS_LISTQUERY,
    __module__ = 'proto.tests.tests_pb2'
    # @@protoc_insertion_point(class_scope:tests.DataTreePaths.ListQuery)
    ))
  ,

  RequiredPaths = _reflection.GeneratedProtocolMessageType('RequiredPaths', (_message.Message,), dict(
    DESCRIPTOR = _DATATREEPATHS_REQUIREDPATHS,
    __module__ = 'proto.tests.tests_pb2'
    # @@protoc_insertion_point(class_scope:tests.DataTreePaths.RequiredPaths)
    ))
  ,

  RequiredValues = _reflection.GeneratedProtocolMessageType('RequiredValues', (_message.Message,), dict(
    DESCRIPTOR = _DATATREEPATHS_REQUIREDVALUES,
    __module__ = 'proto.tests.tests_pb2'
    # @@protoc_insertion_point(class_scope:tests.DataTreePaths.RequiredValues)
    ))
  ,
  DESCRIPTOR = _DATATREEPATHS,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.DataTreePaths)
  ))
_sym_db.RegisterMessage(DataTreePaths)
_sym_db.RegisterMessage(DataTreePaths.QueryStep)
_sym_db.RegisterMessage(DataTreePaths.QueryStep.KeyEntry)
_sym_db.RegisterMessage(DataTreePaths.TestQuery)
_sym_db.RegisterMessage(DataTreePaths.ListQuery)
_sym_db.RegisterMessage(DataTreePaths.RequiredPaths)
_sym_db.RegisterMessage(DataTreePaths.RequiredValues)

PathValueMatch = _reflection.GeneratedProtocolMessageType('PathValueMatch', (_message.Message,), dict(
  DESCRIPTOR = _PATHVALUEMATCH,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.PathValueMatch)
  ))
_sym_db.RegisterMessage(PathValueMatch)

SchemaPathComplete = _reflection.GeneratedProtocolMessageType('SchemaPathComplete', (_message.Message,), dict(
  DESCRIPTOR = _SCHEMAPATHCOMPLETE,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.SchemaPathComplete)
  ))
_sym_db.RegisterMessage(SchemaPathComplete)

GetSetTest = _reflection.GeneratedProtocolMessageType('GetSetTest', (_message.Message,), dict(
  DESCRIPTOR = _GETSETTEST,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.GetSetTest)
  ))
_sym_db.RegisterMessage(GetSetTest)

GetSetValidationTest = _reflection.GeneratedProtocolMessageType('GetSetValidationTest', (_message.Message,), dict(
  DESCRIPTOR = _GETSETVALIDATIONTEST,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.GetSetValidationTest)
  ))
_sym_db.RegisterMessage(GetSetValidationTest)

GetSetValidationOper = _reflection.GeneratedProtocolMessageType('GetSetValidationOper', (_message.Message,), dict(
  DESCRIPTOR = _GETSETVALIDATIONOPER,
  __module__ = 'proto.tests.tests_pb2'
  # @@protoc_insertion_point(class_scope:tests.GetSetValidationOper)
  ))
_sym_db.RegisterMessage(GetSetValidationOper)


_HASKEYS_ITEM_KEYENTRY.has_options = True
_HASKEYS_ITEM_KEYENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_DATATREEPATHS_QUERYSTEP_KEYENTRY.has_options = True
_DATATREEPATHS_QUERYSTEP_KEYENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
# @@protoc_insertion_point(module_scope)
